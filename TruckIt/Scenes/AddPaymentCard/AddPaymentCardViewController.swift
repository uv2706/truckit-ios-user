//
//  AddPaymentCardViewController.swift
//  ForgetMeKnots
//
//  Created by hb on 23/05/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Stripe

protocol AddPaymentCardDisplayLogic: class {
    func didReceiveSaveCard(response: AddPaymentCard.ViewModel?, message: String, success:String)
}

class AddPaymentCardViewController: UIViewController {
    
    @IBOutlet weak var imgBg: UIImageView!
    @IBOutlet weak var imgCard: UIImageView!
    @IBOutlet weak var btnSaveCard: UIButton!
    @IBOutlet weak var txtFieldCvv: CustomTextField!
    @IBOutlet weak var txtFieldExpDate: CustomTextField!
    @IBOutlet weak var txtFieldCardnumber: CustomTextField!
    @IBOutlet weak var txtFieldNameOnCard: CustomTextField!
    
    var month = 0
    var year = 0
    var maxCountNumber = 19
    var maxCVC = 3
    var strToken = ""
    private var previousSelection: UITextRange?
    private var previousTextFieldContent: String?
    
    var interactor: AddPaymentCardBusinessLogic?
    var router: (NSObjectProtocol & AddPaymentCardRoutingLogic & AddPaymentCardDataPassing)?
    
    // Insatance
    ///
    /// - Returns: AddPaymentCardViewController
    class func instance() -> AddPaymentCardViewController? {
        return StoryBoard.AddPaymentCard.board.instantiateViewController(withIdentifier: AppClass.AddPaymentCardVc.rawValue) as? AddPaymentCardViewController
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = AddPaymentCardInteractor()
        let presenter = AddPaymentCardPresenter()
        let router = AddPaymentCardRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
     if #available(iOS 13.0, *) {
          overrideUserInterfaceStyle = .light
     } else {
          // Fallback on earlier versions
     }
        setupLayout()
    }
    
    /// Setup UI
    func setupLayout() {
        self.navigationItem.title = "Add Card"
        imgCard.changePngColorTo(color: #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0))
        txtFieldCvv.delegate = self
        txtFieldExpDate.delegate = self
        txtFieldCardnumber.delegate = self
        txtFieldNameOnCard.delegate = self
        
        setLeftViewButtonForTextField(image: #imageLiteral(resourceName: "img_cardnum_h"), textField: txtFieldCardnumber)
        txtFieldCardnumber.addTarget(self, action: #selector(reformatAsCardNumber), for: .editingChanged)
        imgBg.image = #imageLiteral(resourceName: "top_bg").gradientImageWithBounds(bounds: imgBg.bounds, colors: [#colorLiteral(red: 0.03921568627, green: 0.09411764706, blue: 0.3450980392, alpha: 1),#colorLiteral(red: 0.03921568627, green: 0.09411764706, blue: 0.3450980392, alpha: 1)])
            
        btnSaveCard.setRoundCorner(radius: 5)
    }
    
    /// Get Stripe Token
    ///
    /// - Parameters:
    ///   - name: card holder name
    ///   - carNo: card number
    ///   - expMon: card exp month
    ///   - expYear: card exp year
    ///   - cvc: card cvc
    func getToken(name:String,carNo:String,expMon:Int,expYear:Int,cvc:String) {
        AppConstants.appDelegate.showIndicator()
        let cardParams = STPCardParams()
        cardParams.number = carNo.replacingOccurrences(of: " ", with: "")
        cardParams.expMonth = UInt(expMon)
        cardParams.expYear = UInt(expYear)
        cardParams.cvc = cvc
        cardParams.name = name
        STPAPIClient.shared().createToken(withCard: cardParams) { (token: STPToken?, error: Error?) in
            guard let token = token, error == nil else {
                AppConstants.appDelegate.hideIndicator()
                
                AppConstants.appDelegate.showTopMessage(message: error?.localizedDescription ?? "", type: .Error)
                return
            }
            self.strToken = token.tokenId
            AppConstants.appDelegate.hideIndicator()
            
            self.addAnayltics(analyticsParameterItemID: "id-addpaymentmethod", analyticsParameterItemName: "click_addpaymentmethod", analyticsParameterContentType: "click_addpaymentmethod")
            
            let request = AddPaymentCard.Request(stripeToken: self.strToken)
            self.interactor?.saveCard(request: request)
            //call here api and send to server
            
        }
    }
    
    /// Format text as card number
    ///
    /// - Parameter textField: CardNumber Textfield
    @objc func reformatAsCardNumber(textField: UITextField) {
        
        let aBrand = STPCardValidator.brand(forNumber: textField.text!)
        let aMax = STPCardValidator.maxLength(for: aBrand)
        let aStr = textField.text
        
        var targetCursorPosition = 0
        if let startPosition = textField.selectedTextRange?.start {
            targetCursorPosition = textField.offset(from: textField.beginningOfDocument, to: startPosition)
        }
        let aSpaces = aBrand.rawValue == 1 ? 2 : 3
        
        maxCountNumber = (aMax + aSpaces)
        maxCVC = (Int(STPCardValidator.maxCVCLength(for: aBrand)))
        
        
        if (aStr?.count)! > aMax + aSpaces
        {
            textField.text = textField.text?.substring(start: 0, end:aMax + aSpaces)
            return
        }
        
        var cardNumberWithoutSpaces = ""
        if let text = textField.text {
            cardNumberWithoutSpaces = self.removeNonDigits(string: text, andPreserveCursorPosition: &targetCursorPosition)
        }
        
        if cardNumberWithoutSpaces.count > 19 {
            textField.text = previousTextFieldContent
            textField.selectedTextRange = previousSelection
            return
        }
        
        let cardNumberWithSpaces = self.insertCreditCardSpaces(cardNumberWithoutSpaces, preserveCursorPosition: &targetCursorPosition)
        textField.text = cardNumberWithSpaces
        
        if let targetPosition = textField.position(from: textField.beginningOfDocument, offset: targetCursorPosition) {
            textField.selectedTextRange = textField.textRange(from: targetPosition, to: targetPosition)
        }
    }
    
    /// Remove nondigits number
    ///
    /// - Parameters:
    ///   - string: card number string
    ///   - cursorPosition: current position of curser
    /// - Returns: return formatted string
    func removeNonDigits(string: String, andPreserveCursorPosition cursorPosition: inout Int) -> String {
        var digitsOnlyString = ""
        let originalCursorPosition = cursorPosition
        
        for i in Swift.stride(from: 0, to: string.count, by: 1) {
            let characterToAdd = string[string.index(string.startIndex, offsetBy: i)]
            if characterToAdd >= "0" && characterToAdd <= "9" {
                digitsOnlyString.append(characterToAdd)
            }
            else if i < originalCursorPosition {
                cursorPosition -= 1
            }
        }
        
        return digitsOnlyString
    }
    
    
    /// Insert space in card number
    ///
    /// - Parameters:
    ///   - string: Card Number
    ///   - cursorPosition: current curser position
    /// - Returns: formatted string
    func insertCreditCardSpaces(_ string: String, preserveCursorPosition cursorPosition: inout Int) -> String {
        // Mapping of card prefix to pattern is taken from
        // https://baymard.com/checkout-usability/credit-card-patterns
        
        // UATP cards have 4-5-6 (XXXX-XXXXX-XXXXXX) format
        
        
        let is456 = string.hasPrefix("1")
        
        // These prefixes reliably indicate either a 4-6-5 or 4-6-4 card. We treat all these
        // as 4-6-5-4 to err on the side of always letting the user type more digits.
        let is465 = [
            // Amex
            "34", "37",
            ].contains { string.hasPrefix($0) }
        
        
        let is478 = [
            
            // Diners Club
            "300", "301", "302", "303", "304", "305", "309", "36", "38", "39"
            ].contains { string.hasPrefix($0) }
        
        // In all other cases, assume 4-4-4-4-3.
        // This won't always be correct; for instance, Maestro has 4-4-5 cards according
        // to https://baymard.com/checkout-usability/credit-card-patterns, but I don't
        // know what prefixes identify particular formats.
        let is4444 = !(is456 || is465)
        
        var stringWithAddedSpaces = ""
        let cursorPositionInSpacelessString = cursorPosition
        
        for i in 0..<string.count {
            let needs465Spacing = (is478 && (i == 4 || i == 10 || i == 15))
            let needs456Spacing = (is456 && (i == 4 || i == 9 || i == 15))
            let needs478Spacing = (is456  && i > 0 && (i % 4) == 0)
            let needs4444Spacing = (is4444 && i > 0 && (i % 4) == 0)
            
            if needs465Spacing || needs456Spacing || needs4444Spacing || needs478Spacing {
                stringWithAddedSpaces.append(" ")
                
                if i < cursorPositionInSpacelessString {
                    cursorPosition += 1
                }
            }
            
            let characterToAdd = string[string.index(string.startIndex, offsetBy:i)]
            stringWithAddedSpaces.append(characterToAdd)
        }
        
        return stringWithAddedSpaces
    }
    
    
    /// Save card tap action
    ///
    /// - Parameter sender: UIbutton
    @IBAction func btnSaveCardTapped(_ sender: Any) {
        self.view.endEditing(true)
        if txtFieldNameOnCard.text?.trim().isEmpty ?? true {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.requireCardHolderName, type: .Error)
        } else if txtFieldCardnumber.text?.trim().isEmpty ?? true {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.requireCardNumvber, type: .Error)
        } else if txtFieldExpDate.text?.trim().isEmpty ?? true {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.requireExpDate, type: .Error)
        } else if txtFieldCvv.text?.trim().isEmpty ?? true {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.requireCvv, type: .Error)
        } else {
            self.getToken(name: txtFieldNameOnCard.text ?? "", carNo: txtFieldCardnumber.text ?? "", expMon: (self.month), expYear: (self.year), cvc: txtFieldCvv.text ?? "")
        }
        
    }
    
    /// Button back tap action
    @objc func btnBackapped() {
        self.navigationController?.popViewController(animated: true)
    }
    
}

extension AddPaymentCardViewController: UITextFieldDelegate ,STPPaymentCardTextFieldDelegate {
    
    func paymentCardTextFieldDidChange(_ textField: STPPaymentCardTextField) {
        
    }
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool
    {
        weak var weakSelf = self
        
        let  char = string.cString(using: String.Encoding.utf8)!
        let isBackSpace = strcmp(char, "\\b")
        
        if textField == txtFieldExpDate
        {
            var aStr = (weakSelf?.txtFieldExpDate.text)! + string
            
            if isBackSpace  == -92
            {
                if aStr.count > 0
                {
                    let aTempStr = txtFieldExpDate.text?.substring(start: 0, end: (txtFieldExpDate.text?.count)! - 1)
                    if (aTempStr?.count)! > 0 &&  String((aTempStr?.last!)!) == "/"
                    {
                        weakSelf?.txtFieldExpDate.text = aTempStr
                    }
                }
                return true
            }
            
            let aDateFormatter = AppConstants.appDelegate.dateFormatter
            aDateFormatter.dateFormat = "YY"
            let aYear = Int(aDateFormatter.string(from: Date()))
            
            
            if  Int(string) == nil
            {
                aStr = aStr.substring(start:0 , end: aStr.count - 1)
            }
            
            if aStr.count == 1
            {
                let aInt = Int(aStr)
                if aInt! > 1
                {
                    month = Int(aStr)!
                    aStr = "0" + String(aInt!)  + "/"
                    
                }
            }
            else if aStr.count == 2
            {
                month = Int(aStr)!
                aStr = aStr + "/"
            }
            else if aStr.count == 4
            {
                let aInt = Int(string + "9")
                if aInt! < aYear!
                {
                    return false
                }
            }
            else if aStr.count == 5
            {
                let aString = (aStr.components(separatedBy: "/"))
                if aString.count > 1 {
                    let aInt = Int(aString[1])
                    if aInt ?? 0 < aYear!
                    {
                        return false
                    }
                    else
                    {
                        year = aInt ?? 0
                    }
                }
            }
            weakSelf?.txtFieldExpDate.text = aStr
            if (weakSelf?.txtFieldExpDate.text?.count)! >= 5
            {
                weakSelf?.txtFieldExpDate.text = weakSelf?.txtFieldExpDate.text?.substring(start: 0, end:5)
                txtFieldCvv.becomeFirstResponder()
            }
            
            
            return false
        }
        else if textField == txtFieldCvv
        {
            let aStr = (weakSelf?.txtFieldCvv.text)! + string
            
            if isBackSpace  == -92
            {
                return true
            }
            else if aStr.count == 3
            {
                txtFieldCvv.text = aStr
                txtFieldCvv.resignFirstResponder()
                return false
            }
        }
        return true
    }
    
    
}


extension AddPaymentCardViewController: AddPaymentCardDisplayLogic {
    
    func didReceiveSaveCard(response: AddPaymentCard.ViewModel?, message: String, success:String) {
        if success == "1" {
            if let response = response {
                AppConstants.appDelegate.showTopMessage(message: message, type: .Success)
                if let paymentList = self.navigationController?.viewControllers[(self.navigationController?.viewControllers.count ?? 0)-2] as? PaymentCardListingViewController {
                    paymentList.interactor?.cardList(Indicator: false)
                    self.navigationController?.popToViewController(paymentList, animated: true)
                }
            }
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
}
