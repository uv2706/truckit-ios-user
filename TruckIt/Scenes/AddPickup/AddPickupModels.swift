//
//  AddPickupModels.swift
//  PickUpUser
//
//  Created by hb on 11/06/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum AddPickup {
    struct Request {
        var pickLocation: String
        var pickLat: String
        var pickLong: String
        var pickContactName: String
        var pickContactNum: String
        var pickTime: String
        var dropLocation: String
        var dropLat: String
        var dropLong: String
        var dropTime: String
        var dropContactName: String
        var dropContactNum: String
        var estimatedAmount: String
        var sizeId: String
        var images_count: String
        var imageArray: [UIImage]
        var helper_required: String
    }
    
    class Response: WSResponseData {
        required init(from decoder: Decoder) throws {
            try super.init(from: decoder)
        }
        public override func encode(to encoder: Encoder) throws {
            try super.encode(to: encoder)
        }
    }
}

enum SizeList {
    
    class ViewModel: WSResponseData {
        var sizeId: String?
        var size: String?
        var sizeInLbs : String?
        var status : String?
        
        enum CodingKeys: String, CodingKey {
            case size
            case size_id
            case size_in_lbs
            case status
        }
        
        required init(from decoder: Decoder) throws {
            try super.init(from: decoder)
            let values = try decoder.container(keyedBy: CodingKeys.self)
            sizeId = try values.decodeIfPresent(String.self, forKey: .size_id)
            size = try values.decodeIfPresent(String.self, forKey: .size)
            status = try values.decodeIfPresent(String.self, forKey: .status)
            sizeInLbs = try values.decodeIfPresent(String.self, forKey: .size_in_lbs)
        }
        
        public override func encode(to encoder: Encoder) throws {
            try super.encode(to: encoder)
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(size, forKey: .size )
            try container.encode(status, forKey: .status )
            try container.encode(sizeId, forKey: .size_id )
            try container.encode(sizeInLbs, forKey: .size_in_lbs)
        }
    }
}
