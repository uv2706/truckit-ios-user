//
//  AddPickupWorker.swift
//  PickUpUser
//
//  Created by hb on 11/06/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class AddPickupWorker {
    var imageArray = [UIImage]()
    var imageData = [Data]()
    
    func SizeList(completionHandler: @escaping ([SizeList.ViewModel]?, _ message: String?, _ successCode: String?) -> Void) {
        NetworkService.dataRequest(with: AddPickupAPIRouter.getSize, showLoader: true) { (responce: WSResponse<SizeList.ViewModel>?, error: NetworkError?) in
            if let detail = responce {
                if let resparray = detail.arrayData, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                    completionHandler( resparray, msg, detail.setting?.success)
                } else {
                    completionHandler(nil, detail.setting?.message, detail.setting?.success)
                }
            } else {
                completionHandler(nil, error?.errorMessage() ?? AlertMessage.defaultError, "0")
            }
        }
    }
    
    func createPickUp(APIRequest: AddPickup.Request,completionHandler: @escaping ([AddPickup.Response]?, _ message: String?, _ successCode: String?) -> Void) {
        NetworkService.dataRequest(with: AddPickupAPIRouter.createPickup(request: APIRequest), showLoader: true) { (responce: WSResponse<AddPickup.Response>?, error: NetworkError?) in
            if let detail = responce {
                if let resparray = detail.arrayData, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                    completionHandler(resparray, msg, detail.setting?.success)
                } else {
                    completionHandler(nil, detail.setting?.message, detail.setting?.success)
                }
            } else {
                completionHandler(nil, error?.errorMessage() ?? AlertMessage.defaultError, "0")
            }
        }
    }
}


extension NSMutableData {
    func appendString(_ string: String) {
        let data = string.data(using: String.Encoding.utf8, allowLossyConversion: false)
        append(data!)
    }
}
