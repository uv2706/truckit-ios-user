//
//  CancelPickupViewController.swift
//  PickUpUser
//
//  Created by hb on 23/07/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CancelPickupDisplayLogic: class {
    func didReceiveCancelPickup(message: String, success: String)
}

class CancelPickupViewController: UIViewController, CancelPickupDisplayLogic {
    @IBOutlet weak var textViewOther: UITextView!
    var interactor: CancelPickupBusinessLogic?
    var router: (NSObjectProtocol & CancelPickupRoutingLogic & CancelPickupDataPassing)?
    var placeholderLabel : UILabel!
    @IBOutlet weak var lblNote: UILabel!
    @IBOutlet weak var cntViewHeight: NSLayoutConstraint!
    var isAccepted = false

    
    var pickupId = ""
    var completion: ((String)->())?
    /// Insatance
    ///
    /// - Returns: CancelPickupViewController
    class func instance() -> CancelPickupViewController? {
        return StoryBoard.CancelPickup.board.instantiateViewController(withIdentifier: AppClass.CancelPickupVc.rawValue) as? CancelPickupViewController
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CancelPickupInteractor()
        let presenter = CancelPickupPresenter()
        let router = CancelPickupRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        if #available(iOS 13.0, *) {
            overrideUserInterfaceStyle = .light
        } else {
            // Fallback on earlier versions
        }
        setUp() 
    }
    
    /// Setup UI
    func setUp() {
        if isAccepted {
            let note = "Note: If you are canceling job within 1 hour of pick up time you will be charged $\(GlobalUtility.shared.roundOffTextTwoDigit(TruckItSessionHandler.shared.cancelCharge)) as cancellation fee."
            
            self.lblNote.addAttributeString(mainString: note, subString: "$\(GlobalUtility.shared.roundOffTextTwoDigit(TruckItSessionHandler.shared.cancelCharge))", subStringFont: UIFont(name: "Montserrat-SemiBold", size: self.lblNote.font.pointSize) ?? self.lblNote.font, subStringColor: self.lblNote.textColor)
        }
        else {
            self.cntViewHeight.constant = 400
            self.lblNote.text = ""
        }
        
        
        
        textViewOther.delegate = self
        textViewOther.layer.borderColor = #colorLiteral(red: 0.8039215686, green: 0.8039215686, blue: 0.7725490196, alpha: 0.5)
        textViewOther.backgroundColor = #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
        textViewOther.layer.cornerRadius = 5
        textViewOther.layer.borderWidth = 0.5
        placeholderLabel = UILabel()
        placeholderLabel.text = "Cancel Reason"
        placeholderLabel.textColor = AppConstants.placeholderColor
        placeholderLabel.font = textViewOther.font
        placeholderLabel.sizeToFit()
        textViewOther.addSubview(placeholderLabel)
        placeholderLabel.frame.origin = CGPoint(x: 5, y: (textViewOther.font?.pointSize)! / 2)
        placeholderLabel.isHidden = !textViewOther.text.isEmpty
    }
    
    /// Dismiss actrion
    ///
    /// - Parameter sender: UIButton
    @IBAction func btnDismissTapped(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
    }
    
    /// Cancel pickup tap action
    ///
    /// - Parameter sender: UIButton
    @IBAction func cancelPickUp(_ sender: UIButton) {
        self.view.endEditing(true)
        if textViewOther.text.isEmpty {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.cancelReason, type: .Error)
        } else {
            
            addAnayltics(analyticsParameterItemID: "id-cancelpickup", analyticsParameterItemName: "click_cancelpickup", analyticsParameterContentType: "click_cancelpickup")
            
            let req = CancelPickup.Request(pickUpId: self.pickupId, message: textViewOther.text ?? "")
            self.interactor?.cancelPickup(request: req)
        }
    }
    
    //MARK : Cancel pickup api protocol
    func didReceiveCancelPickup(message: String, success: String) {
        if success == "1" {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Success)
            if self.completion != nil {
                self.dismiss(animated: true, completion: nil)
                self.completion!("success")
            }
            
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
}

extension CancelPickupViewController: UITextViewDelegate {
    func textViewDidChange(_ textView: UITextView) {
        placeholderLabel.isHidden = !textViewOther.text.isEmpty
    }
    
    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        if textView == textViewOther {
            let maxLength = AppConstants.textViewMaxLengeth
            let currentString: NSString = textViewOther.text! as NSString
            let newString: NSString = currentString.replacingCharacters(in: range, with: text) as NSString
            if newString.length > maxLength {
                return newString.length <= maxLength
            }
        }
        return true
    }
}
