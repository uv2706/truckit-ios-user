//
//  ChangePasswordViewController.swift
//  Udecide
//
//  Created by hb on 15/04/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ChangePasswordDisplayLogic: class {
    func didReceivecChangePasswordResponse(message: String, success: String)
}

class ChangePasswordViewController: UIViewController {
    
    @IBOutlet weak var txtFieldOldPassword: UITextField!
    @IBOutlet weak var txtFieldNewPassword: UITextField!
    @IBOutlet weak var txtFieldConfirmPassword: UITextField!
    @IBOutlet weak var btnupdatePassword: UIButton!
    @IBOutlet weak var viewBg: UIView!
    
    var interactor: ChangePasswordBusinessLogic?
    var router: (NSObjectProtocol & ChangePasswordRoutingLogic & ChangePasswordDataPassing)?
    
    
    /// Insatance
    ///
    /// - Returns: ChangePasswordViewController
    class func instance() -> ChangePasswordViewController? {
        return StoryBoard.ChangePassword.board.instantiateViewController(withIdentifier: AppClass.changePasswordVc.rawValue) as? ChangePasswordViewController
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ChangePasswordInteractor()
        let presenter = ChangePasswordPresenter()
        let router = ChangePasswordRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupLayout()
    }
    
    /// Setup Textfield and UI
    func setupLayout() {
        self.navigationItem.title = "Change Password"
        self.viewBg.layer.cornerRadius = 10
        txtFieldOldPassword.delegate = self
        txtFieldNewPassword.delegate = self
        txtFieldConfirmPassword.delegate = self
        
        addButtonShadow(button: btnupdatePassword)
        
        setLeftViewButtonForTextField(image: #imageLiteral(resourceName: "password"), textField: txtFieldOldPassword)
        setLeftViewButtonForTextField(image: #imageLiteral(resourceName: "password"), textField: txtFieldNewPassword)
        setLeftViewButtonForTextField(image: #imageLiteral(resourceName: "password"), textField: txtFieldConfirmPassword)
    }
    
    /// Validiate Fields and call api
    fileprivate func validiateFields() {
        self.view.endEditing(true)
        if txtFieldOldPassword.text?.isEmpty ?? true {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.requiewOldPassword, type: .Error)
            txtFieldOldPassword.becomeFirstResponder()
        } else if txtFieldNewPassword.text?.isEmpty ?? true {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.enterPassword, type: .Error)
            txtFieldNewPassword.becomeFirstResponder()
        } else if !(txtFieldNewPassword.text?.isValidPassword() ?? false) {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.invalidPassword, type: .Error, displayDuraction: 10)
            self.txtFieldNewPassword.becomeFirstResponder()
        } else if txtFieldConfirmPassword.text?.isEmpty ?? true {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.requiewReEnterNewPassword, type: .Error)
            txtFieldConfirmPassword.becomeFirstResponder()
        } else if (txtFieldNewPassword.text != txtFieldConfirmPassword.text) {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.invalidConfirmPassword, type: .Error)
            txtFieldConfirmPassword.becomeFirstResponder()
        } else {
            let request = ChangePassword.Request(oldPassword: AESCrypt.encrypt((txtFieldOldPassword.text ?? ""), password: AppConstants.aesEncryptionKey, isPreviewApp: false), newPassword: AESCrypt.encrypt((txtFieldNewPassword.text ?? ""), password: AppConstants.aesEncryptionKey, isPreviewApp: false))
            self.interactor?.changePassword(request: request)
        }
    }
    
    
    /// Change password
    ///
    /// - Parameter sender: btnUpdate
    @IBAction func btnUpdateTapped(_ sender: UIButton) {
        validiateFields()
    }
    
}

extension ChangePasswordViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField == txtFieldOldPassword {
            txtFieldNewPassword.becomeFirstResponder()
        } else if textField == txtFieldNewPassword {
            txtFieldConfirmPassword.becomeFirstResponder()
        } else if textField == txtFieldConfirmPassword {
            txtFieldConfirmPassword.resignFirstResponder()
        } 
        return true
    }
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        if textField == txtFieldNewPassword {
            let maxLength = AppConstants.paswordMaxLength
            let currentString: NSString = textField.text! as NSString
            let newString: NSString = currentString.replacingCharacters(in: range, with: string) as NSString
            if newString.length > maxLength {
                return newString.length <= maxLength
            }
        }
        return true
    }
}

extension ChangePasswordViewController: ChangePasswordDisplayLogic {
    func didReceivecChangePasswordResponse(message: String, success: String) {
        if success == "1" {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Success)
            self.navigationController?.popViewController(animated: true)
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
}
