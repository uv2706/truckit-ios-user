//
//  DeliveriesViewController.swift
//  PickUpUser
//
//  Created by hb on 14/06/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SideMenu

protocol DeliveriesDisplayLogic: class {
    
}

class DeliveriesViewController: UIViewController, DeliveriesDisplayLogic {
    var interactor: DeliveriesBusinessLogic?
    var router: (NSObjectProtocol & DeliveriesRoutingLogic & DeliveriesDataPassing)?
    
    @IBOutlet weak var imgPending: UIImageView!
    @IBOutlet weak var imgOngoing: UIImageView!
    @IBOutlet weak var imgPast: UIImageView!
    @IBOutlet weak var btnPending: UIButton!
    @IBOutlet weak var btnOngoing: UIButton!
    @IBOutlet weak var btnPast: UIButton!
    @IBOutlet weak var containerView: UIView!
    
    var pageController : UIPageViewController!
    var currentIndex = 0
    var previeousIndex = 0
    var pastVc : PastViewController!
    var ongoingVc : OngoingViewController!
    var pendingVc : PendingViewController!
    var arrVC = [UIViewController]()
    // MARK: Object lifecycle
    
    /// Insatance
    ///
    /// - Returns: DeliveriesViewController
    class func instance() -> DeliveriesViewController? {
        return StoryBoard.Deliveries.board.instantiateViewController(withIdentifier: AppClass.DeliveriesVc.rawValue) as? DeliveriesViewController
    }
    
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = DeliveriesInteractor()
        let presenter = DeliveriesPresenter()
        let router = DeliveriesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
     if #available(iOS 13.0, *) {
          overrideUserInterfaceStyle = .light
     } else {
          // Fallback on earlier versions
     }
        setupLayout()
    }
    
    /// Setup Textfield and UI
    func setupLayout() {
        self.navigationItem.title = "My Deliveries"
        self.navigationItem.leftBarButtonItem = self.getButton(image:#imageLiteral(resourceName: "menu"), selected_image: #imageLiteral(resourceName: "menu"), action: #selector(btnMenuTapped), target: self)
    }
    
    /// menu button Tap Action
    
    @objc func btnMenuTapped() {
        self.present(SideMenuManager.default.leftMenuNavigationController!, animated: true, completion: nil)
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        initializeControllers()
    }
    
    /// Initialize past ongoing and pending viewControllers
    func initializeControllers() {
        if pageController == nil {
            pastVc =  PastViewController.instance()
            ongoingVc =  OngoingViewController.instance()
            pendingVc =  PendingViewController.instance()
            
            weak var weakSelf = self
            pastVc.parentVC = weakSelf
            ongoingVc.parentVC = weakSelf
            pendingVc.parentVC = weakSelf

            pendingVc.tapHandler = {data in
                if let pickUpDetail = PickUpDetailViewController.instance() {
                    pickUpDetail.pickUpId = data.pickupId ?? ""
                    pickUpDetail.type = "pending"
                    self.navigationController?.pushViewController(pickUpDetail, animated: true)
                }
            }
            
            ongoingVc.tapHandler = {data in
                if let pickUpDetail = OngoingDeliveriesViewController.instance() {
                    pickUpDetail.pickUpId = data.pickupId ?? ""
                    pickUpDetail.type = "ongoing"
                    self.navigationController?.pushViewController(pickUpDetail, animated: true)
                }
            }
            
            pastVc.tapHandler = {data in
                if let pickUpDetail = PastPickUpDetailViewController.instance() {
                    if data.pickUpStatus == "Cancelled" {
                        pickUpDetail.isCanceled = true
                    }
                    pickUpDetail.pickupId = data.pickupId ?? ""
                    self.navigationController?.pushViewController(pickUpDetail, animated: true)
                }
            }
            
            pageController = UIPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil)
            
            pageController.isPagingEnabled = false
            pageController.dataSource  = self
            pageController.delegate  = self
            
            arrVC = [pastVc,ongoingVc,pendingVc]
            pageController.setViewControllers([ongoingVc], direction: .reverse, animated: false, completion: nil)
            self.checkStatus(index: 1)
            self.addChild(pageController)
            containerView.addSubview(pageController.view)
            pageController.view.frame = containerView.bounds
        }
    }
    
    /// Set defualt ongoing viewcontroller
    func setOngoingVc() {
        if self.pageController.viewControllers?.last is PendingViewController {
            self.pageController.setViewControllers([(self.ongoingVc)!], direction: .reverse, animated: true, completion: { (finished) in
                let aVC = self.pageController
                DispatchQueue.main.async {
                    aVC?.setViewControllers([(self.ongoingVc)!], direction: .forward, animated:true, completion: nil)
                }
            })
        } else {
            self.pageController.setViewControllers([(self.ongoingVc)!], direction: .forward, animated: true, completion: { (finished) in
                let aVC = self.pageController
                DispatchQueue.main.async {
                    aVC?.setViewControllers([(self.ongoingVc)!], direction: .reverse, animated:true, completion: nil)
                }
            })
        }
        
        self.currentIndex = 1
        self.checkStatus(index: 1)
    }
    
    /// Button past, pending, ongoing tap action
    ///
    /// - Parameter sender: UIButton
    @IBAction func btnDeliveriesTapped(_ sender: UIButton) {
        switch sender {
        case btnPast:
            self.pageController.setViewControllers([(self.pastVc)!], direction: .reverse, animated: true, completion: { (finished) in
                let aVC = self.pageController
                DispatchQueue.main.async {
                    aVC?.setViewControllers([(self.pastVc)!], direction: .forward, animated:true, completion: nil)
                }
            })
            self.currentIndex = 0
            
            self.checkStatus(index: 0)
        case btnOngoing:
            setOngoingVc()
        case btnPending:
            self.pageController.setViewControllers([(self.pendingVc)!], direction: .forward, animated: true, completion: { (finished) in
                let aVC = self.pageController
                DispatchQueue.main.async {
                    aVC?.setViewControllers([(self.pendingVc)!], direction: .reverse, animated:true, completion: nil)
                }
            })
            self.currentIndex = 2
            self.checkStatus(index: 2)
        default:
            self.pageController.setViewControllers([(self.pastVc)!], direction: .forward, animated: true, completion: { (finished) in
                let aVC = self.pageController
                DispatchQueue.main.async {
                    aVC?.setViewControllers([(self.pastVc)!], direction: .forward, animated:true, completion: nil)
                }
            })
            self.currentIndex = 0
            self.checkStatus(index: 0)
        }
    }
    
    /// Check status of selected viewController
    ///
    /// - Parameter index: index
    func checkStatus(index:Int) {
        switch index {
        case 0:
            btnPast.isSelected = true
            btnOngoing.isSelected = false
            btnPending.isSelected = false
            
            imgPast.isHidden = false
            imgOngoing.isHidden = true
            imgPending.isHidden = true
        case 1:
            btnPast.isSelected = false
            btnOngoing.isSelected = true
            btnPending.isSelected = false
            
            imgPast.isHidden = true
            imgOngoing.isHidden = false
            imgPending.isHidden = true
        case 2:
            btnPast.isSelected = false
            btnOngoing.isSelected = false
            btnPending.isSelected = true
            
            imgPast.isHidden = true
            imgOngoing.isHidden = true
            imgPending.isHidden = false
        default:
            btnPast.isSelected = true
            btnOngoing.isSelected = false
            btnPending.isSelected = false
            
            imgPast.isHidden = false
            imgOngoing.isHidden = true
            imgPending.isHidden = true
        }
    }
}

extension DeliveriesViewController : UIPageViewControllerDelegate,UIPageViewControllerDataSource {
    
    func pageViewController(_ pageViewController: UIPageViewController, didFinishAnimating finished: Bool, previousViewControllers: [UIViewController], transitionCompleted completed: Bool) {
        if !completed { return }
        
        guard let viewController = previousViewControllers.last else {
            return
        }
        
        self.currentIndex =  (viewController is PastViewController) ? 0 : ((viewController is OngoingViewController) ? 1:2)
    }
    
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController?
    {
        var index =  (viewController is PastViewController) ? 0 : ((viewController is OngoingViewController) ? 1:2)
        
        if (index == 0) || (index == NSNotFound) {
            return nil
        }
        self.previeousIndex = index
        index -= 1
        self.currentIndex = index
        return viewControllerAtIndex(index: index)
    }
    
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController?
    {
        var index =   (viewController is PastViewController) ? 0 : ((viewController is OngoingViewController) ? 1:2)
        
        if index == NSNotFound {
            return nil
        }
        
        self.previeousIndex = index
        index += 1
        if (index == self.arrVC.count) {
            return nil
        }
        self.currentIndex = index
        return viewControllerAtIndex(index: index)
    }
    
    func viewControllerAtIndex(index: Int) -> UIViewController? {
        if self.arrVC.count == 0 || index >= self.arrVC.count {
            return nil
        }
        
        if index == 0 {
            return pastVc
        } else if index == 1 {
            return ongoingVc
        } else {
            return pendingVc
        }
    }
}


