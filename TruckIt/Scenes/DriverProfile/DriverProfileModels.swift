//
//  DriverProfileModels.swift
//  PickUpUser
//
//  Created by hb on 20/06/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum DriverProfile {
    struct Request {
        var driverId: String
    }
    
    class ViewModel: WSResponseData {
        var driverDetail: [DriverDetail]?
        var driverReview : [DriverReview]?
        
        private enum CodingKeys: String, CodingKey {
            case get_driver_details
            case get_reviews_of_driver
        }
        
        public override func encode(to encoder: Encoder) throws {
            try super.encode(to: encoder)
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(driverDetail, forKey: .get_driver_details)
            try container.encode(driverReview, forKey: .get_reviews_of_driver)
        }
        
        required public init(from decoder: Decoder) throws {
            try super.init(from: decoder)
            let values = try decoder.container(keyedBy: CodingKeys.self)
            driverDetail = try values.decodeIfPresent([DriverDetail].self, forKey: .get_driver_details)
            driverReview = try values.decodeIfPresent([DriverReview].self, forKey: .get_reviews_of_driver)
        }
        
        class DriverDetail: Codable {
            var avgRating: String?
            var successfullDeliveries: String?
            var location: String?
            var contactInfo: String?
            var driverProfile: String?
            var licensePlate: String?
            var make: String?
            var model: String?
            var year: String?
            var name: String?
            var driverId: String?
            var bio: String?
            
            private enum CodingKeys: String, CodingKey {
                case avg_rating
                case successfull_deliveries
                case location
                case contact_info
                case driver_profile
                case license_plate
                case make
                case model
                case year
                case driver_name
                case driver_id
                case bio
            }
            
            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encode(avgRating, forKey: .avg_rating)
                try container.encode(successfullDeliveries, forKey: .successfull_deliveries)
                try container.encode(location, forKey: .location)
                try container.encode(contactInfo, forKey: .contact_info)
                try container.encode(driverProfile, forKey: .driver_profile)
                try container.encode(licensePlate, forKey: .license_plate)
                try container.encode(make, forKey: .make)
                try container.encode(model, forKey: .model)
                try container.encode(year, forKey: .year)
                try container.encode(name, forKey: .driver_name)
                try container.encode(driverId, forKey: .driver_id)
                try container.encode(bio, forKey: .bio)
            }
            
            required public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                avgRating = try values.decodeIfPresent(String.self, forKey: .avg_rating)
                successfullDeliveries = try values.decodeIfPresent(String.self, forKey: .successfull_deliveries)
                location = try values.decodeIfPresent(String.self, forKey: .location)
                contactInfo = try values.decodeIfPresent(String.self, forKey: .contact_info)
                driverProfile = try values.decodeIfPresent(String.self, forKey: .driver_profile)
                licensePlate = try values.decodeIfPresent(String.self, forKey: .license_plate)
                make = try values.decodeIfPresent(String.self, forKey: .make)
                model = try values.decodeIfPresent(String.self, forKey: .model)
                year = try values.decodeIfPresent(String.self, forKey: .year)
                name = try values.decodeIfPresent(String.self, forKey: .driver_name)
                driverId = try values.decodeIfPresent(String.self, forKey: .driver_id)
                bio = try values.decodeIfPresent(String.self, forKey: .bio)
            }
        }
        
        class DriverReview: Codable {
            var userName: String?
            var reviewdAt: String?
            var userProfile: String?
            var review: String?
            
            private enum CodingKeys: String, CodingKey {
                case user_name
                case reviewd_at
                case user_profile
                case review
            }
            
            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encode(userName, forKey: .user_name)
                try container.encode(reviewdAt, forKey: .reviewd_at)
                try container.encode(userProfile, forKey: .user_profile)
                try container.encode(review, forKey: .review)
            }
            
            required public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                userName = try values.decodeIfPresent(String.self, forKey: .user_name)
                reviewdAt = try values.decodeIfPresent(String.self, forKey: .reviewd_at)
                userProfile = try values.decodeIfPresent(String.self, forKey: .user_profile)
                review = try values.decodeIfPresent(String.self, forKey: .review)
            }
        }
    }
}
