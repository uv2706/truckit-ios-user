//
//  EditProfileViewController.swift
//  Udecide
//
//  Created by hb on 15/04/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GooglePlaces

protocol EditProfileDisplayLogic: class {
    func didReceiveEditProfileResponse(response: Login.Authentication.ViewModel?, message: String, success: String)
}

class EditProfileViewController: UIViewController {
    var interactor: EditProfileBusinessLogic?
    var router: (NSObjectProtocol & EditProfileRoutingLogic & EditProfileDataPassing)?
    
    @IBOutlet weak var txtViewAboutUs: UITextView!
    @IBOutlet weak var lblPhoneNumber: UILabel!
    @IBOutlet weak var txtFieldLastName: UITextField!
    @IBOutlet weak var lblEmail: UILabel!
    @IBOutlet weak var lblName: UILabel!
    @IBOutlet weak var txtFieldCity: UITextField!
    @IBOutlet weak var txtFieldStreet: UITextField!
    @IBOutlet weak var txtFieldFirstName: UITextField!
    @IBOutlet weak var btnUpdate: UIButton!
    @IBOutlet weak var imgViewProfile: UIImageView!
    @IBOutlet weak var viewBg: UIView!
    
    var placeholderLabel : UILabel!
    var uploadedFile: Data?
    var fileType = ""
    var filename = ""
    
    var imgUrl = ""
    var lat = ""
    var long = ""
    var isFileAvailable: Bool = false {
        didSet {
            if isFileAvailable {
                self.imgViewProfile.layer.cornerRadius = 50
                self.imgViewProfile.layer.borderColor = #colorLiteral(red: 0.9136484265, green: 0.9137764573, blue: 0.913607955, alpha: 1)
                self.imgViewProfile.layer.borderWidth = 1
            } else {
            }
        }
    }
    
    /// Insatance
    ///
    /// - Returns: EditProfileViewController
    class func instance() -> EditProfileViewController? {
        return StoryBoard.EditProfile.board.instantiateViewController(withIdentifier: AppClass.editProfileVc.rawValue) as? EditProfileViewController
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = EditProfileInteractor()
        let presenter = EditProfilePresenter()
        let router = EditProfileRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
     if #available(iOS 13.0, *) {
          overrideUserInterfaceStyle = .light
     } else {
          // Fallback on earlier versions
     }
        setupLayout()
    }
    
    /// Setup Textfield and UI
    func setupLayout() {
        self.navigationItem.title = "Edit Profile"
        self.viewBg.layer.cornerRadius = 10
        txtFieldFirstName.delegate = self
        txtFieldLastName.delegate = self
        txtFieldStreet.delegate = self
        txtFieldCity.delegate = self
        setUserData()
        addButtonShadow(button: btnUpdate)
        
        setLeftViewButtonForTextField(image: #imageLiteral(resourceName: "first_name"), textField: txtFieldFirstName)
        setLeftViewButtonForTextField(image: #imageLiteral(resourceName: "first_name"), textField: txtFieldLastName)
        setLeftViewButtonForTextField(image: #imageLiteral(resourceName: "address"), textField: txtFieldStreet)
        setLeftViewButtonForTextField(image: #imageLiteral(resourceName: "address"), textField: txtFieldCity)
        
        txtViewAboutUs.delegate = self
        placeholderLabel = UILabel()
        placeholderLabel.text = "About Me (optional)"
        placeholderLabel.textColor = AppConstants.placeholderColor
        placeholderLabel.font = txtViewAboutUs.font
        placeholderLabel.sizeToFit()
        txtViewAboutUs.addSubview(placeholderLabel)
        placeholderLabel.frame.origin = CGPoint(x: 5, y: (txtViewAboutUs.font?.pointSize)! / 2)
        placeholderLabel.isHidden = !txtViewAboutUs.text.isEmpty
    }
    
    /// Set Logged in user data
    func setUserData() {
        if let userDetail = TruckItSessionHandler.shared.getLoggedUserDetails() {
            self.txtFieldFirstName.text = userDetail.firstName
            self.txtFieldLastName.text = userDetail.lastName
            self.txtFieldStreet.text  = userDetail.address
            self.txtFieldCity.text = userDetail.aptNo
            self.lat = userDetail.lat ?? ""
            self.long = userDetail.long ?? ""
            
            self.lblName.text = "\(userDetail.firstName ?? "") \( userDetail.lastName ?? "")"
            self.lblEmail.text = userDetail.email
            self.txtViewAboutUs.text = userDetail.aboutMe
            
            if let profile = userDetail.userProfile, profile != "" {
                self.imgUrl = profile
                self.imgViewProfile.setImage(with: profile,placeHolder: #imageLiteral(resourceName: "sign_up_user"))
                self.imgViewProfile.layer.cornerRadius = 50
                self.imgViewProfile.layer.borderColor = #colorLiteral(red: 0.9136484265, green: 0.9137764573, blue: 0.913607955, alpha: 1)
                self.imgViewProfile.layer.borderWidth = 1
            }
            
            var aStr = userDetail.mobileNo?.replacingOccurrences(of: " ", with: "").replacingOccurrences(of: "(", with: "").replacingOccurrences(of: ")", with: "").replacingOccurrences(of: "-", with: "")
            if (aStr!.count) >= 10
            {
                aStr = aStr!.substring(start: 0, end: 10)
            }
            let str = aStr!.toPhoneNumber()
            self.lblPhoneNumber.text = str
        }
    }
    
    /// Open Image Picker (camera/gallery)
    func showImagePicker() {
        CustomImagePicker.shared.openImagePickerWith(mediaType: .MediaTypeImage, allowsEditing: true, actionSheetTitle: "Select Photo", message: "Please choose option", cancelButtonTitle: "Cancel", cameraButtonTitle: "Camera", galleryButtonTitle: "Gallery") { (_, success, dic) in
            if success {
                if let img = dic!["edited_image"] as? UIImage {
                    self.imgUrl = dic!["stringUrl"] as? String ?? ""
                    self.filename = "\(NSTimeIntervalSince1970).png"
                    self.uploadedFile = img.compressTo(0.5)
                    self.fileType = "png"
                    self.imgViewProfile.image = img
                    self.imgViewProfile.contentMode = .scaleAspectFill
                }
                self.isFileAvailable = true
            }
        }
    }
    /// Show image full view
    ///
    /// - Parameter sender: UIbutton
    @IBAction func btnImageFullViewTapped(_ sender: UIButton) {
        if imgUrl != "" {
            self.showImageDetailView(arrImage: [self.imgUrl])
        }
    }
    
    /// Edit user profile
    ///
    /// - Parameter sender: btnUpdate
    @IBAction func btnUpdateTapped(_ sender: Any) {
        validiateFields()
    }
    
    /// Validiate Fields and call edit api
    
    func validiateFields() {
        self.view.endEditing(true)
        if txtFieldFirstName.text?.isEmpty ?? true {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.firstNameRequired, type: .Error)
            txtFieldFirstName.becomeFirstResponder()
        } else if txtFieldLastName.text?.isEmpty ?? true {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.lastNameRequired, type: .Error)
            txtFieldLastName.becomeFirstResponder()
        } else if txtFieldStreet.text?.isEmpty ?? true {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.requireAddress, type: .Error)
            txtFieldStreet.becomeFirstResponder()
        } else {
            let phone = lblPhoneNumber.text?.replacingOccurrences(of: "(", with: "").replacingOccurrences(of: ")", with: "").replacingOccurrences(of: " ", with: "").replacingOccurrences(of: "-", with: "")
            
            let request = EditProfile.Request(firstName: txtFieldFirstName.text?.trimmingCharacters(in: .whitespaces) ?? "", lastName: txtFieldLastName.text?.trimmingCharacters(in: .whitespaces) ?? "", userProfile: uploadedFile ?? Data(), PhoneNumber: phone ?? "", address: txtFieldStreet.text ?? "", lat: self.lat, long: self.long, profileName: self.filename, aboutMe: txtViewAboutUs.text ?? "", AptNp: txtFieldCity.text ?? "")
            self.interactor?.editProfile(request: request)
        }
    }
    
    /// Select image
    ///
    /// - Parameter sender: btnImage
    @IBAction func btnAddImageTapped(_ sender: Any) {
        self.showImagePicker()
    }
    
}

extension EditProfileViewController: UITextViewDelegate {
    func textViewDidChange(_ textView: UITextView) {
        placeholderLabel.isHidden = !txtViewAboutUs.text.isEmpty
    }
    
    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        if textView == txtViewAboutUs {
            let maxLength = AppConstants.textViewMaxLengeth
            let currentString: NSString = txtViewAboutUs.text! as NSString
            let newString: NSString = currentString.replacingCharacters(in: range, with: text) as NSString
            if newString.length > maxLength {
                return newString.length <= maxLength
            }
        }
        return true
    }
}


extension EditProfileViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField == txtFieldFirstName {
            txtFieldLastName.becomeFirstResponder()
        } else if textField == txtFieldLastName {
            txtFieldStreet.becomeFirstResponder()
        } else if textField == txtFieldStreet {
            txtFieldCity.becomeFirstResponder()
        } else if textField == txtFieldCity {
            txtFieldCity.resignFirstResponder()
        }
        return true
    }
    
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        if textField == txtFieldStreet {
            if let googleApi = GoogleSearch.instance() {
                googleApi.completion = {predictor, address ,error in
                    guard error == nil else {return}
                    if let predictor = predictor {
                        self.txtFieldStreet.text = address
                        
                        let placeClient = GMSPlacesClient.shared()
                        placeClient.lookUpPlaceID(predictor.placeID) { (place, error) in
                            if error == nil
                            {
                                print( String(describing: (place?.coordinate.latitude)!))
                                print(String(describing: (place?.coordinate.longitude)!))
                                self.lat = String(describing: (place?.coordinate.latitude)!)
                                self.long = String(describing: (place?.coordinate.longitude)!)
                            }
                        }
                    }
                }
                googleApi.modalPresentationStyle = .fullScreen
                self.present(googleApi, animated: true, completion: nil)
            }
        }
    }
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        if (textField == txtFieldFirstName || textField == txtFieldLastName) {
            do {
                let regex = try NSRegularExpression(pattern: ".*[^A-Za-z ].*", options: [])
                if regex.firstMatch(in: string, options: [], range: NSMakeRange(0, string.count)) != nil {
                    return false
                } else {
                    let maxLength = 50
                    let currentString: NSString = textField.text! as NSString
                    let newString: NSString = currentString.replacingCharacters(in: range, with: string) as NSString
                    if newString.length > maxLength {
                        return newString.length <= maxLength
                    }
                }
            }
            catch {
                print("ERROR")
            }
        } 
        return true
    }
}

extension EditProfileViewController: EditProfileDisplayLogic {
    func didReceiveEditProfileResponse(response: Login.Authentication.ViewModel?, message: String, success: String) {
        if success == "1" {
            if let response = response {
                TruckItSessionHandler.shared.setLoggedUserDetails(userDetail: response)
                AppConstants.appDelegate.showTopMessage(message: message, type: .Success)
                self.navigationController?.popViewController(animated: true)
            } else {
                AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
            }
        }  else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
}
