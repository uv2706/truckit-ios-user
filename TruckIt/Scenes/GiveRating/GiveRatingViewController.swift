//
//  GiveRatingViewController.swift
//  PickUpUser
//
//  Created by hb on 03/07/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit


protocol GiveRatingDisplayLogic: class {
    func giveRating(message: String, success: String)
}

class GiveRatingViewController: UIViewController {
    var interactor: GiveRatingBusinessLogic?
    var router: (NSObjectProtocol & GiveRatingRoutingLogic & GiveRatingDataPassing)?
    
    @IBOutlet weak var viewRating: SwiftyStarRatingView!
    @IBOutlet weak var txtViewDescription: UITextView!
    var placeholderLabel : UILabel!
    
    var completion: (()->())?
    
    var rating: CGFloat = 0.0
    var driverId = ""
    var pickUpId = ""
    /// Insatance
    ///
    /// - Returns: GiveRatingViewController
    class func instance() -> GiveRatingViewController? {
        return StoryBoard.GiveRating.board.instantiateViewController(withIdentifier: AppClass.GiveRatingVc.rawValue) as? GiveRatingViewController
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = GiveRatingInteractor()
        let presenter = GiveRatingPresenter()
        let router = GiveRatingRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
     if #available(iOS 13.0, *) {
          overrideUserInterfaceStyle = .light
     } else {
          // Fallback on earlier versions
     }
        setUp()
    }
    
    /// Setup UI
    func setUp() {
        txtViewDescription.delegate = self
        txtViewDescription.layer.borderColor = #colorLiteral(red: 0.8039215686, green: 0.8039215686, blue: 0.7725490196, alpha: 0.5)
        txtViewDescription.backgroundColor = #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
        txtViewDescription.layer.cornerRadius = 5
        txtViewDescription.layer.borderWidth = 0.5
        placeholderLabel = UILabel()
        placeholderLabel.text = "Review Comments..."
        placeholderLabel.textColor = AppConstants.placeholderColor
        placeholderLabel.font = txtViewDescription.font
        placeholderLabel.sizeToFit()
        txtViewDescription.addSubview(placeholderLabel)
        placeholderLabel.frame.origin = CGPoint(x: 5, y: (txtViewDescription.font?.pointSize)! / 2)
        placeholderLabel.isHidden = !txtViewDescription.text.isEmpty
    }
    
    /// Dismiss Tap action
    ///
    /// - Parameter sender: UIButton
    @IBAction func btnDismissTapped(_ sender: UIButton) {
        self.dismiss(animated: true, completion: nil)
    }
    
    /// Give Ratings tap action
    ///
    /// - Parameter sender: UIButton
    @IBAction func btnRatingTapped(_ sender: UIButton) {
        self.view.endEditing(true)
        
        rating = viewRating.value
        if  rating == 0.0 {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.selectRating, type: .Error)
        }
            
        else if txtViewDescription.text.trim().isEmpty {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.requireReviewcomment, type: .Error)
        } else {
            let req = GiveRating.Request(toId: self.driverId, rating: "\(rating)", review: txtViewDescription.text ?? "", pickUpId: self.pickUpId)
            
            addAnayltics(analyticsParameterItemID: "id-addratingsandreview", analyticsParameterItemName: "click_addratingsandreview", analyticsParameterContentType: "click_addratingsandreview")
            
            self.interactor?.giveRating(req: req)
        }
    }
    
    /// Star value change event action
    ///
    /// - Parameter sender: SwiftyStarRatingView
    @IBAction func starValuechangesAction(_ sender: SwiftyStarRatingView) {
        self.rating = viewRating.value
    }
}

extension GiveRatingViewController: UITextViewDelegate {
    func textViewDidChange(_ textView: UITextView) {
        placeholderLabel.isHidden = !txtViewDescription.text.isEmpty
    }
    
    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        if textView == txtViewDescription {
            let maxLength = AppConstants.textViewMaxLengeth
            let currentString: NSString = txtViewDescription.text! as NSString
            let newString: NSString = currentString.replacingCharacters(in: range, with: text) as NSString
            if newString.length > maxLength {
                return newString.length <= maxLength
            }
        }
        return true
    }
}

extension GiveRatingViewController: GiveRatingDisplayLogic {
    func giveRating(message: String, success: String) {
        if success == "1" {
            if self.completion != nil {
                self.completion!()
            }
            self.dismiss(animated: true, completion: nil)
            AppConstants.appDelegate.showTopMessage(message: message, type: .Success)
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
}
