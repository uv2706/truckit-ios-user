//
//  HomeModels.swift
//  Udecide
//
//  Created by hb on 11/04/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

import UIKit

enum Home {
    struct Request {
        var latitude: String
        var longitude: String
    }
    
    class ViewModel: WSResponseData {
        var driverDistance : String?
        var driverName : String?
        var userId: String?
        var address: String?
        var latitude: String?
        var longitude: String?

        enum CodingKeys: String, CodingKey {
            case driver_distance
            case driver_name
            case user_id
            case address
            case latitude
            case longitude
        }
        
        required init(from decoder: Decoder) throws {
            try super.init(from: decoder)
            let values = try decoder.container(keyedBy: CodingKeys.self)
            driverDistance = try values.decodeIfPresent(String.self, forKey: .driver_distance)
            driverName = try values.decodeIfPresent(String.self, forKey: .driver_name)
            userId = try values.decodeIfPresent(String.self, forKey: .user_id)
            address = try values.decodeIfPresent(String.self, forKey: .address)
            latitude = try values.decodeIfPresent(String.self, forKey: .latitude)
            longitude = try values.decodeIfPresent(String.self, forKey: .longitude)
        }
        
        public override func encode(to encoder: Encoder) throws {
            try super.encode(to: encoder)
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(driverDistance, forKey: .driver_distance)
            try container.encode(driverName, forKey: .driver_name)
            try container.encode(userId, forKey: .user_id)
            try container.encode(address, forKey: .address)
            try container.encode(latitude, forKey: .latitude)
            try container.encode(longitude, forKey: .longitude)
        }
    }
}

enum BackGroundCheck {
    class ViewModel: WSResponseData {
        var nearbyRadius : String?
        var updatePickupStatusNearby : String?
        var platformCommissionFee : String?
        var backgroundCheckDescription : String?
        var driverApplicationFee : String?
        var cancellationCharge : String?
        var PAYMENTMODE : String?
        
        var versionUpdateCheck : String?
        var versionUpdateOptional : String?
        var androidVersionNumber : String?
        var drvierAndroidVersionNumber : String?
        var iphoneVersionNumber : String?
        var drvierIphoneVersionNumber : String?
        var versionCheckMessage : String?
        
        enum CodingKeys: String, CodingKey {
            case nearby_radius
            case update_pickup_status_nearby
            case platform_commission_fee
            case background_check_description
            case driver_application_fee
            case cancellation_charge
            case PAYMENT_MODE
            
            case version_update_check
            case version_update_optional
            case android_version_number
            case drvier_android_version_number
            case iphone_version_number
            case drvier_iphone_version_number
            case version_check_message
        }
        
        required init(from decoder: Decoder) throws {
            try super.init(from: decoder)
            let values = try decoder.container(keyedBy: CodingKeys.self)
            nearbyRadius = try values.decodeIfPresent(String.self, forKey: .nearby_radius)
            updatePickupStatusNearby = try values.decodeIfPresent(String.self, forKey: .update_pickup_status_nearby)
            platformCommissionFee = try values.decodeIfPresent(String.self, forKey: .platform_commission_fee)
            backgroundCheckDescription = try values.decodeIfPresent(String.self, forKey: .background_check_description)
            driverApplicationFee = try values.decodeIfPresent(String.self, forKey: .driver_application_fee)
            cancellationCharge = try values.decodeIfPresent(String.self, forKey: .cancellation_charge)
            PAYMENTMODE = try values.decodeIfPresent(String.self, forKey: .PAYMENT_MODE)
            
            versionUpdateCheck = try values.decodeIfPresent(String.self, forKey: .version_update_check)
            versionUpdateOptional = try values.decodeIfPresent(String.self, forKey: .version_update_optional)
            androidVersionNumber = try values.decodeIfPresent(String.self, forKey: .android_version_number)
            drvierAndroidVersionNumber = try values.decodeIfPresent(String.self, forKey: .drvier_android_version_number)
            iphoneVersionNumber = try values.decodeIfPresent(String.self, forKey: .iphone_version_number)
            drvierIphoneVersionNumber = try values.decodeIfPresent(String.self, forKey: .drvier_iphone_version_number)
            versionCheckMessage = try values.decodeIfPresent(String.self, forKey: .version_check_message)
        }
        
        public override func encode(to encoder: Encoder) throws {
            try super.encode(to: encoder)
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(nearbyRadius, forKey: .nearby_radius)
            try container.encode(updatePickupStatusNearby, forKey: .update_pickup_status_nearby)
            try container.encode(platformCommissionFee, forKey: .platform_commission_fee)
            try container.encode(backgroundCheckDescription, forKey: .background_check_description)
            try container.encode(driverApplicationFee, forKey: .driver_application_fee)
            try container.encode(cancellationCharge, forKey: .cancellation_charge)
            try container.encode(PAYMENTMODE, forKey: .PAYMENT_MODE)
            
            try container.encode(versionUpdateCheck, forKey: .version_update_check)
            try container.encode(versionUpdateOptional, forKey: .version_update_optional)
            try container.encode(androidVersionNumber, forKey: .android_version_number)
            try container.encode(drvierAndroidVersionNumber, forKey: .drvier_android_version_number)
            try container.encode(iphoneVersionNumber, forKey: .iphone_version_number)
            try container.encode(drvierIphoneVersionNumber, forKey: .drvier_iphone_version_number)
            try container.encode(versionCheckMessage, forKey: .version_check_message)
        }
    }
}
