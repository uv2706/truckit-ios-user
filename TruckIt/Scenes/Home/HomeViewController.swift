//
//  HomeViewController.swift
//  Udecide
//
//  Created by hb on 11/04/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SideMenu
import MapKit
import CoreLocation
import Stripe
import GooglePlaces
import Kingfisher

protocol HomeDisplayLogic: class {
    func didReceiveNearPickUpListResponse(viewmodel: [Home.ViewModel]?, message: String, successCode: String)
    func getConfig(response: BackGroundCheck.ViewModel?, message: String, succes: String)
    func addRating(response: PickUpDetail.ViewModel?, message: String, success: String)
    func didReceiveEditProfileResponse(response: Login.Authentication.ViewModel?, message: String, success: String)
    
}

class HomeViewController: UIViewController, CLLocationManagerDelegate {
    
    var menuVC : SideMenuViewController!
    var sideMenu : UIViewController!
    
    var latitude = 0.00
    var longitude = 0.00
    
    @IBOutlet weak var viewAddNew: UIView!
    @IBOutlet weak var btnAdd: UIButton!
    @IBOutlet weak var mapView: MKMapView!
    
    let user = TruckItSessionHandler.shared.getLoggedUserDetails()
    let regionRadius: CLLocationDistance = 16093.4
    
    var locationManager: CLLocationManager!
    
    
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    var isAddressProcessStarted = false
    
    var pickUpList = [Home.ViewModel]() {
        didSet {
            for aObj in pickUpList {
                let aLat = Double(aObj.latitude ?? "0.0")
                let aLong = Double(aObj.longitude ?? "0.0")
                let aMarker = LocationAnnotation(aLat ?? 0.0, aLong ?? 0.0, type: .driver, data: aObj)
                mapView.addAnnotation(aMarker)
            }
            let aMarker1 = LocationAnnotation(latitude,longitude, type: .user, data: nil)
            mapView.addAnnotation(aMarker1)
        }
    }
    
    class func instance() -> HomeViewController? {
        return StoryBoard.Home.board.instantiateViewController(withIdentifier: AppClass.HomeVc.rawValue) as? HomeViewController
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    //MARK: - Setup MenuVC
    func setupMenuVC() {
        if let menuVc = SideMenuViewController.instance() {
            self.menuVC = menuVc
        }
        SideMenuManager.default.leftMenuNavigationController =  UIStoryboard(name: "SideMenu", bundle:nil ).instantiateInitialViewController() as? SideMenuNavigationController
        SideMenuManager.default.leftMenuNavigationController?.setNavigationBarHidden(true, animated: false)
        SideMenuManager.default.leftMenuNavigationController?.menuWidth =  UIScreen.main.bounds.width - 50
        SideMenuManager.default.leftMenuNavigationController?.statusBarEndAlpha = 0.0
    }
    
    private func updateMenus() {
        let settings = makeSettings()
        SideMenuManager.default.leftMenuNavigationController?.settings = settings
        SideMenuManager.default.rightMenuNavigationController?.settings = settings
    }
    
    private func selectedPresentationStyle() -> SideMenuPresentationStyle {
        return .menuSlideIn
    }
    
    private func makeSettings() -> SideMenuSettings {
        let presentationStyle = selectedPresentationStyle()
        presentationStyle.backgroundColor = UIColor.white
        presentationStyle.menuStartAlpha = CGFloat(1.0)
        presentationStyle.menuScaleFactor = CGFloat(1.0)
        presentationStyle.onTopShadowOpacity = 0.0
        presentationStyle.presentingEndAlpha = CGFloat(1.0)
        presentationStyle.presentingScaleFactor = CGFloat(1.0)
        var settings = SideMenuSettings()
        settings.presentationStyle = presentationStyle
        settings.menuWidth = UIScreen.main.bounds.width - 50
        let _:[UIBlurEffect.Style?] = [nil, .dark, .light, .extraLight]
        settings.blurEffectStyle = .light
        settings.statusBarEndAlpha = 0
        return settings
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    @IBAction func btnCenterMapTapped(_ sender: UIButton) {
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        if #available(iOS 13.0, *) {
            overrideUserInterfaceStyle = .light
        } else {
            // Fallback on earlier versions
        }
        setupLayout()
        
        
        if !TruckItSessionHandler.shared.isRatingAPICall {
            interactor?.addRating()
        }
        addAnayltics(analyticsParameterItemID: "id-homescreen", analyticsParameterItemName: "view_homescreen", analyticsParameterContentType: "view_homescreen")
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        if !isAddressProcessStarted {
            self.isAddressProcessStarted = true
            self.checkIfAddressIsAdded()
        }
    }
    
    
    func checkIfAddressIsAdded()
    {
        if let aUserModel = TruckItSessionHandler.shared.getLoggedUserDetails() {
            if aUserModel.address?.count == 0 {
                self.showSimpleAlert(message: "Please update the home address so we can show you drivers near by you.",okAction: {
                    if let googleApi = GoogleSearch.instance() {
                        googleApi.completion = {predictor, address ,error in
                            guard error == nil else {
                                self.isAddressProcessStarted = false
                                return}
                            if let predictor = predictor {
                                
                                let placeClient = GMSPlacesClient.shared()
                                placeClient.lookUpPlaceID(predictor.placeID) { (place, error) in
                                    if error == nil
                                    {
                                        print(String(describing: (place?.coordinate.latitude)!))
                                        print(String(describing: (place?.coordinate.longitude)!))
                                        
                                        
                                        let lat = String(describing: (place?.coordinate.latitude)!)
                                        let long = String(describing: (place?.coordinate.longitude)!)
                                        
                                        
                                        var uploadFileData : Data = Data()
                                        
                                        if aUserModel.userProfile?.count ?? 0 > 0 {
                                            
                                            let url = URL(string: aUserModel.userProfile!)
                                            KingfisherManager.shared.downloader.downloadImage(with: url!, options: nil, progressBlock: nil) { (result) in
                                                switch result {
                                                case .success(let value):
                                                    if let data = value.image.compressTo(0.5) {
                                                        let request = EditProfile.Request(firstName: aUserModel.firstName?.trimmingCharacters(in: .whitespaces) ?? "", lastName: aUserModel.lastName?.trimmingCharacters(in: .whitespaces) ?? "", userProfile: data, PhoneNumber: aUserModel.mobileNo ?? "", address: address, lat: lat, long: long, profileName: "", aboutMe: aUserModel.aboutMe ?? "", AptNp: aUserModel.aptNo ?? "")
                                                        self.interactor?.editProfile(request: request)
                                                        
                                                    }
                                                    
                                                case .failure :
                                                    let uploadedFile = #imageLiteral(resourceName: "sign_up_user").jpegData(compressionQuality: 1.0)
                                                    let request = EditProfile.Request(firstName: aUserModel.firstName?.trimmingCharacters(in: .whitespaces) ?? "", lastName: aUserModel.lastName?.trimmingCharacters(in: .whitespaces) ?? "", userProfile: uploadedFile ?? Data(), PhoneNumber: aUserModel.mobileNo ?? "", address: address, lat: lat, long: long, profileName: "", aboutMe: aUserModel.aboutMe ?? "", AptNp: aUserModel.aptNo ?? "")
                                                    self.interactor?.editProfile(request: request)
                                                }
                                                
                                                
                                            }
                                            
                                            
                                        }
                                        else {
                                            let uploadedFile = #imageLiteral(resourceName: "sign_up_user").jpegData(compressionQuality: 1.0)
                                            let request = EditProfile.Request(firstName: aUserModel.firstName?.trimmingCharacters(in: .whitespaces) ?? "", lastName: aUserModel.lastName?.trimmingCharacters(in: .whitespaces) ?? "", userProfile: uploadedFile ?? Data(), PhoneNumber: aUserModel.mobileNo ?? "", address: address, lat: lat, long: long, profileName: "", aboutMe: aUserModel.aboutMe ?? "", AptNp: aUserModel.aptNo ?? "")
                                            self.interactor?.editProfile(request: request)
                                        }
                                        
                                        
                                        
                                    }
                                    else {
                                        self.isAddressProcessStarted = false
                                    }
                                }
                            }
                            else {
                                self.isAddressProcessStarted = false
                            }
                        }
                        googleApi.modalPresentationStyle = .fullScreen
                        self.present(googleApi, animated: true, completion: nil)
                    }
                })
            }
        }
    }
    
    /// Setup Textfield and UI
    func setupLayout() {
        self.navigationItem.title = "Home"
        self.navigationItem.leftBarButtonItem = self.getButton(image:#imageLiteral(resourceName: "menu"), selected_image:#imageLiteral(resourceName: "menu"), action: #selector(btnSettingTapped), target: self)
        
        setupMenuVC()
        
        AppConstants.appDelegate.sideMenu  = UIStoryboard(name: "SideMenu", bundle: nil).instantiateViewController(withIdentifier: "SideMenuNav")
        
        mapView.delegate = self
        
        if CLLocationManager.authorizationStatus() == .restricted || !CLLocationManager.locationServicesEnabled() {
            
            self.callAPIForUserAddressLocation()
            
            
        } else {
            self.locationManager = CLLocationManager()
            self.locationManager.delegate = self
            self.locationManager.desiredAccuracy = kCLLocationAccuracyBest
            self.locationManager.requestWhenInUseAuthorization()
            self.locationManager.startUpdatingLocation()
            
            
        }
        
        updateMenus()
    }
    
    func callAPIForUserAddressLocation()
    {
        
        let loginData = TruckItSessionHandler.shared.getLoggedUserDetails()
        if loginData?.lat != "" {
            self.latitude =  Double(loginData!.lat!)!
        }else {
            self.latitude = Double("0.00")!
        }
        if loginData?.long != "" {
            self.longitude = Double(loginData!.long!)!
        }else {
            self.longitude = Double("0.00")!
        }
        
        let req = Home.Request(latitude: "\(self.latitude)", longitude: "\(self.longitude)")
        interactor?.callNearPickUpAPI(request: req)
        setCenterOnMap()
        let aMarker = LocationAnnotation(latitude,longitude, type: .user, data: nil)
        mapView.addAnnotation(aMarker)
    }
    
    
    func locationManager(_ manager: CLLocationManager,
                         didChangeAuthorization status: CLAuthorizationStatus) {
        switch status {
        case .restricted, .denied:
            
            weak var weakself = self
            self.displayAlert(msg:AlertMessage.location , ok: "Settings", cancel: "Cancel", okAction: {
                guard let settingsUrl = URL(string: UIApplication.openSettingsURLString) else {
                    return
                }
                if UIApplication.shared.canOpenURL(settingsUrl) {
                    UIApplication.shared.open(settingsUrl, options: [:], completionHandler: { (success) in
                        if !TruckItSessionHandler.shared.isRatingAPICall {
                            weakself?.interactor?.addRating()
                        }
                    })
                }
            }) {
                if !TruckItSessionHandler.shared.isRatingAPICall {
                    weakself?.interactor?.addRating()
                }
            }
            
            
            
            self.showSimpleAlert(message: AlertMessage.location) {
                guard let settingsUrl = URL(string: UIApplication.openSettingsURLString) else {
                    return
                }
                if UIApplication.shared.canOpenURL(settingsUrl) {
                    UIApplication.shared.open(settingsUrl, options: [:], completionHandler: { (success) in
                        
                    })
                }
            }
        case .authorizedWhenInUse:
            break
        case .authorizedAlways:
            break
        case .notDetermined:
            break
        }
    }
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        let location = locations.last! as CLLocation
        
        let center = CLLocationCoordinate2D(latitude: location.coordinate.latitude, longitude: location.coordinate.longitude)
        _ = MKCoordinateRegion(center: center, span: MKCoordinateSpan(latitudeDelta: 0.01, longitudeDelta: 0.01))
        
        self.longitude = location.coordinate.longitude
        self.latitude = location.coordinate.latitude
        
        let req = Home.Request(latitude: "\(self.latitude)", longitude: "\(self.longitude)")
        interactor?.callNearPickUpAPI(request: req)
        setCenterOnMap()
        let aMarker = LocationAnnotation(latitude,longitude, type: .user, data: nil)
        mapView.addAnnotation(aMarker)
        self.locationManager.stopUpdatingLocation()
    }
    
    /// Back button Tap Action
    
    @objc func btnSettingTapped() {
        self.present(SideMenuManager.default.leftMenuNavigationController!, animated: true, completion: nil)
    }
    
    /// Add Pickup
    ///
    /// - Parameter sender: UIButton
    @IBAction func btnAddPickup(_ sender: UIButton) {
        if let addPick = AddPickupViewController.instance() {
            self.navigationController?.pushViewController(addPick, animated: true)
        }
    }
    
    /// Set  center on map
    func setCenterOnMap() {
        let initialLocation = CLLocation(latitude: latitude, longitude: longitude)
        centerMapOnLocation(location: initialLocation)
    }
    
    /// Center map on particular location
    ///
    /// - Parameter location: CLLocation
    func centerMapOnLocation(location: CLLocation) {
        let coordinateRegion = MKCoordinateRegion(center: location.coordinate,latitudinalMeters: regionRadius, longitudinalMeters: regionRadius)
        mapView.setRegion(coordinateRegion, animated: true)
    }
}

extension HomeViewController: HomeDisplayLogic {
    func didReceiveNearPickUpListResponse(viewmodel: [Home.ViewModel]?, message: String, successCode: String) {
        if successCode == "1" {
            //    self.interactor?.getConfig()
            if let response = viewmodel {
                pickUpList = response
            }
        }
    }
    
    func getConfig(response: BackGroundCheck.ViewModel?, message: String, succes: String) {
        if succes == "1" {
            if let response = response {
                TruckItSessionHandler.shared.saveCancelCharge(token: response.cancellationCharge ?? "0.00")
                TruckItSessionHandler.shared.savePaymentMode(mode: response.PAYMENTMODE ?? "test")
                
                if TruckItSessionHandler.shared.getPaymentMode()?.lowercased() == "live" {
                    STPPaymentConfiguration.shared().publishableKey = StripeUrl.live.rawValue
                } else {
                    STPPaymentConfiguration.shared().publishableKey = StripeUrl.test.rawValue
                }
            }
        } else {
        }
    }
    
    func addRating(response: PickUpDetail.ViewModel?, message: String, success: String)
    {
        if success == "1" {
            if let data = response {
                if data.reviewByUser?.count ?? 0 == 0 {
                    if let ratingVC = RatingViewController.instance() {
                        ratingVC.driverId = data.userId!
                        ratingVC.pickUpId = data.pickupId!
                        ratingVC.pickupDetails = response
                        ratingVC.completion = {
                            
                        }
                        ratingVC.modalPresentationStyle = .overFullScreen
                        
                        self.present(ratingVC, animated: true) {
                            TruckItSessionHandler.shared.isRatingAPICall = true
                            
                        }
                        
                        //                        self.present(ratingVC, animated: true, completion: nil)
                    }
                }
            }
        }
        else {
            
        }
    }
}

extension HomeViewController: MKMapViewDelegate {
    
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        guard !(annotation is MKUserLocation) else {
            return nil
        }
        let annotationIdentifier = "Identifier"
        var annotationView: MKAnnotationView?
        if let dequeuedAnnotationView = mapView.dequeueReusableAnnotationView(withIdentifier: annotationIdentifier) {
            annotationView = dequeuedAnnotationView
            annotationView?.annotation = annotation
        }
        else {
            annotationView = MKAnnotationView(annotation: annotation, reuseIdentifier: annotationIdentifier)
            annotationView?.rightCalloutAccessoryView = UIButton(type: .detailDisclosure)
        }
        guard let annotation = annotation as? LocationAnnotation else {return nil}
        switch annotation.type {
        case .driver:
            if let annotationView = annotationView {
                annotationView.isEnabled = true
                annotationView.image = #imageLiteral(resourceName: "pin_blue-1")
            }
            return annotationView
        case .user:
            if let annotationView = annotationView {
                annotationView.isEnabled = true
                annotationView.image = #imageLiteral(resourceName: "pin_green")
            }
            return annotationView
        }
    }
    
    func didReceiveEditProfileResponse(response: Login.Authentication.ViewModel?, message: String, success: String) {
        if success == "1" {
            if let response = response {
                TruckItSessionHandler.shared.setLoggedUserDetails(userDetail: response)
                AppConstants.appDelegate.showTopMessage(message: message, type: .Success)
                self.callAPIForUserAddressLocation()
            } else {
                AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
            }
        }  else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
}

