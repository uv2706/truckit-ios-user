//
//  HomeWorker.swift
//  Udecide
//
//  Created by hb on 11/04/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class HomeWorker {
    func getNearPickUpList(request: Home.Request,completionHandler: @escaping ([Home.ViewModel]?, _ message: String?, _ successCode: String?) -> Void) {
        NetworkService.dataRequest(with: HomePageAPIRouter.getNearPickUp(request: request), showLoader: false) { (responce: WSResponse<Home.ViewModel>?, error: NetworkError?) in
            if let detail = responce {
                if let resparray = detail.arrayData, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                    completionHandler(resparray, msg, detail.setting?.success)
                } else {
                    completionHandler(nil, detail.setting?.message, detail.setting?.success)
                }
            } else {
                completionHandler(nil, error?.errorMessage() ?? AlertMessage.defaultError, "0")
            }
        }
    }
    
    func getConfig(completionHandler: @escaping ( BackGroundCheck.ViewModel?, _ message: String?, _ successCode: String?) -> Void) {
        NetworkService.dataRequest(with: HomePageAPIRouter.getConfig, showLoader: true) { (responce: WSResponse<BackGroundCheck.ViewModel>?, error: NetworkError?) in
            if let detail = responce {
                if let resparray = detail.arrayData, resparray.count > 0, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                    completionHandler(resparray.first , msg, detail.setting?.success)
                } else {
                    completionHandler(nil,detail.setting?.message, detail.setting?.success)
                }
            } else {
                completionHandler(nil,error?.errorMessage() ?? AlertMessage.defaultError, "0")
            }
        }
    }
    
    func addRating(completionHandler: @escaping ( PickUpDetail.ViewModel?, _ message: String?, _ successCode: String?) -> Void) {
           NetworkService.dataRequest(with: HomePageAPIRouter.addRating, showLoader: true) { (responce: WSResponse<PickUpDetail.ViewModel>?, error: NetworkError?) in
               if let detail = responce {
                   if let resparray = detail.arrayData, resparray.count > 0, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                       completionHandler(resparray.first , msg, detail.setting?.success)
                   } else {
                       completionHandler(nil,detail.setting?.message, detail.setting?.success)
                   }
               } else {
                   completionHandler(nil,error?.errorMessage() ?? AlertMessage.defaultError, "0")
               }
           }
       }
    
    func editProfile(request: EditProfile.Request,completionHandler: @escaping (Login.Authentication.ViewModel?, _ message: String?, _ successCode: String?) -> Void) {
        NetworkService.dataRequest(with: EditProfileAPIRouter.editProfile(request: request), showLoader: true) { (responce: WSResponse<Login.Authentication.ViewModel>?, error: NetworkError?) in
            if let detail = responce {
                if let resparray = detail.arrayData,resparray.count > 0, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                    completionHandler( resparray.first, msg, detail.setting?.success)
                } else {
                    completionHandler(nil, detail.setting?.message, detail.setting?.success)
                }
            } else {
                completionHandler(nil, error?.errorMessage() ?? AlertMessage.defaultError, "0")
            }
        }
    }
}
