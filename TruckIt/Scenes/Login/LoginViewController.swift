//
//  LoginViewController.swift
//  Udecide
//
//  Created by hb on 09/04/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FBSDKLoginKit
import FBSDKCoreKit
import GoogleSignIn
import AuthenticationServices

protocol LoginDisplayLogic: class {
    func didReceiveLoginResponse(response: Login.Authentication.ViewModel?, message: String, success: String)
}

class LoginViewController: UIViewController {
    
    @IBOutlet weak var btnGoogle: UIButton!
    @IBOutlet weak var viewBg: UIView!
    @IBOutlet weak var btnFacebook: UIButton!
    @IBOutlet weak var txtFieldPassword: UITextField!
    @IBOutlet weak var btnLogin: UIButton!
    @IBOutlet weak var txtFieldPhone: UITextField!
    @IBOutlet weak var btnApple: UIButton!
    
    @IBOutlet weak var txtViewDownload: UITextView!
    let date = NSDate()
    let formatter = DateFormatter()
    
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    var socialLoginId = ""
    var socialLoginType = ""
    var socialLoginDict: [String: AnyObject]?
    var appleDict: [String: AnyObject]?
    var googleDict:  GIDGoogleUser!
    
    /// Instance
    ///
    /// - Returns: LoginViewController
    class func instance() -> LoginViewController? {
        return StoryBoard.Login.board.instantiateViewController(withIdentifier: AppClass.LoginVC.rawValue) as? LoginViewController
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setupLayout()
    }
    
    /// Facebook Login
    func loginWithFacebook() {
        let fbLoginManager : LoginManager = LoginManager()
        fbLoginManager.logOut()
        
        fbLoginManager.logIn(permissions: ["email"], from: self) { (result, error) in
            if (error == nil){
                let fbloginresult : LoginManagerLoginResult = result!
                if fbloginresult.grantedPermissions != nil {
                    if(fbloginresult.grantedPermissions.contains("email"))
                    {
                        self.getFBUserData()
                        fbLoginManager.logOut()
                    }
                }
            }
        }
    }
    
    /// Get Facebook User Data
    func getFBUserData() {
        if((AccessToken.current) != nil){
            GraphRequest(graphPath: "me", parameters: ["fields": "id, name, first_name, last_name, picture.type(large), email"]).start(completionHandler: { (connection, result, error) -> Void in
                if (error == nil){
                    let aResult = result as! [String : AnyObject]
                    print(aResult)
                    self.socialLoginId = aResult["id"] as! String
                    self.socialLoginType = SocialLoginType.facebook.rawValue
                    self.socialLoginDict = aResult
                    self.callLoginApi()
                }
            })
        }
    }
    
    /// Google Login
    func loginWithGoogle() {
        GIDSignIn.sharedInstance.signOut()
        let signInConfig = GIDConfiguration.init(clientID: AppConstants.clientGoogleId) //

        GIDSignIn.sharedInstance.signIn(with: signInConfig, presenting: self) { user, error in
          guard error == nil else { return }
                if let user = user {
                    self.socialLoginId = user.userID!
                    self.socialLoginType = SocialLoginType.google.rawValue
                    self.googleDict = user
                    self.callLoginApi()
                }
            

            
          // If sign in succeeded, display the app's main content View.
        }

    }
    
    /// Setup Textfield and UI
    func setupLayout() {
        self.navigationItem.title = "Login"
        
        txtFieldPassword.delegate = self
        txtFieldPhone.delegate = self
        
//        GIDSignIn.sharedInstance()?.clientID = AppConstants.clientGoogleId
//        GIDSignIn.sharedInstance()?.delegate = self
//        GIDSignIn.sharedInstance().presentingViewController = self

        self.viewBg.layer.cornerRadius = 10
        
        self.btnLogin.layer.cornerRadius = 5
        
        addButtonShadow(button: btnLogin)
        addButtonShadow(button: btnFacebook)
        addButtonShadow(button: btnGoogle)
        
        addButtonShadow(button: btnApple)
        
        self.btnFacebook.layer.cornerRadius = 35
        self.btnGoogle.layer.cornerRadius = 35
        self.btnApple.layer.cornerRadius = 35

        setLeftViewButtonForTextField(image: #imageLiteral(resourceName: "password"), textField: txtFieldPassword)
        setLeftViewButtonForTextField(image: #imageLiteral(resourceName: "phone"), textField: txtFieldPhone)
        txtFieldPhone.addTarget(self, action: #selector(self.phoneTextDidChange), for: .editingChanged)
        txtFieldPhone.text = ""
        txtFieldPassword.text = ""
        
        if #available(iOS 13.0, *) {
            self.btnApple.isHidden = false
        } else {
            self.btnApple.isHidden = true
        }
        
//        self.btnFacebook.isHidden = true
//        self.btnGoogle.isHidden = true
//        self.btnApple.isHidden = true

        
        setUpDriverText()
     //    self.btnApple.isHidden = true
    }
    
    @objc func phoneTextDidChange() {
        var aStr = self.txtFieldPhone.text?.replacingOccurrences(of: " ", with: "").replacingOccurrences(of: "(", with: "").replacingOccurrences(of: ")", with: "").replacingOccurrences(of: "-", with: "")
        if (aStr!.count) >= 10
        {
            aStr = aStr!.substring(start: 0, end: 10)
        }
        let str = aStr!.toPhoneNumber()
        self.txtFieldPhone.text = str
        
    }
    
    /// Validiate Login Fields and Call APi
    fileprivate func login() {
        self.view.endEditing(true)
        if txtFieldPhone.text?.isEmpty ?? true {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.requiewPhone, type: .Error)
            txtFieldPhone.becomeFirstResponder()
        } else if !(txtFieldPhone.text?.isValidMobile ?? false) {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.invalidPhoneNumber, type: .Error)
            txtFieldPhone.becomeFirstResponder()
        } else if txtFieldPassword.text?.isEmpty ?? true {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.passwordRequired, type: .Error)
            txtFieldPassword.becomeFirstResponder()
        } else {
            self.socialLoginId = ""
            self.socialLoginType = ""
            callLoginApi()
        }
    }
    
    /// Call Login Api
    fileprivate func callLoginApi() {
        let phone = txtFieldPhone.text?.replacingOccurrences(of: "(", with: "").replacingOccurrences(of: ")", with: "").replacingOccurrences(of: " ", with: "").replacingOccurrences(of: "-", with: "")
        
        //download main
        let request = Login.Authentication.Request(phone: phone ?? "", password: AESCrypt.encrypt((txtFieldPassword.text ?? ""), password: AppConstants.aesEncryptionKey, isPreviewApp: false), socialLoginId: socialLoginId, socialLoginType: socialLoginType)
        
        
        // new
//        let request = Login.Authentication.Request(phone: phone ?? "", password: (txtFieldPassword.text ?? ""), socialLoginId: socialLoginId, socialLoginType: socialLoginType)
        
        
        self.interactor?.login(request: request)
    }
    
    // MARK: Button Action
    
    /// Redirect To Forgot Password
    ///
    /// - Parameter sender: btnForgotPassword
    @IBAction func btnForgotPasswordTapped(_ sender: UIButton) {
        self.router?.redirectToForgotPassword()
    }
    
    /// Perform Login Action
    ///
    /// - Parameter sender: btnLogin
    @IBAction func btnLoginTapped(_ sender: Any) {
        login()
    }
    
    /// Facebook Login
    ///
    /// - Parameter sender: btnFacebook
    @IBAction func btnFacebookTapped(_ sender: Any) {
        loginWithFacebook()
    }
    
    /// Goggle Login
    ///
    /// - Parameter sender: btnGoogle
    @IBAction func btnGoogleTapped(_ sender: Any) {
        loginWithGoogle()
        
    }
    
    /// Perform New Acount Creation Action
    ///
    /// - Parameter sender: btnCreateNewAccount
    @IBAction func btnCreateNewAcountTapped(_ sender: Any) {
        self.router?.redirectToSignUp()
    }
    
    @IBAction func appleTapAction(_ sender: Any) {
        
        if #available(iOS 13.0, *) {
            let appleIDProvider = ASAuthorizationAppleIDProvider()
            let request = appleIDProvider.createRequest()
            request.requestedScopes = [.fullName, .email]
            let authorizationController = ASAuthorizationController(authorizationRequests: [request])
            authorizationController.delegate = self
            authorizationController.presentationContextProvider = self
            authorizationController.performRequests()
        }
 
    }
    
    /// Set up terms and condition and privacy policy label
    func setUpDriverText()
    {
        txtViewDownload.textContainerInset = .zero
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(self.tapLabel(recognizer:)))
        tapGesture.numberOfTapsRequired = 1
        txtViewDownload.addGestureRecognizer(tapGesture)
        
        txtViewDownload.text = " Are you a Driver? Click to Download Truck It Driver App."
        
        let range = (txtViewDownload.text! as NSString).range(of: txtViewDownload.text)
        
        let underlineAttriString = NSMutableAttributedString(string: txtViewDownload.text!, attributes: nil)
        underlineAttriString.addAttribute(NSAttributedString.Key.font, value: UIFont.init(name: "Montserrat-Regular", size: 15.0)!, range: range)
        underlineAttriString.addAttribute(NSAttributedString.Key.foregroundColor, value: UIColor.white, range: range)
        
        let range1 = (txtViewDownload.text! as NSString).range(of: "Click to Download")
        underlineAttriString.addAttribute(NSAttributedString.Key(rawValue: "idnum"), value: "1", range: range1)
        underlineAttriString.addAttribute(NSAttributedString.Key.font, value: UIFont.init(name: "Montserrat-Medium", size: 15.0)!, range: range1)
        underlineAttriString.addAttribute(NSAttributedString.Key.foregroundColor, value: UIColor.white, range: range1)
        
        let range2 = (txtViewDownload.text! as NSString).range(of: "Truck It Driver App.")
        underlineAttriString.addAttribute(NSAttributedString.Key(rawValue: "idnum"), value: "2", range: range2)
        underlineAttriString.addAttribute(NSAttributedString.Key.font, value: UIFont.init(name: "Montserrat-Medium", size: 15.0)!, range: range2)
        underlineAttriString.addAttribute(NSAttributedString.Key.foregroundColor, value: UIColor.white, range: range2)

        let myParagraphStyle = NSMutableParagraphStyle()
        myParagraphStyle.alignment = .center // center the text
        myParagraphStyle.lineSpacing = 3 //Change spacing between lines
        myParagraphStyle.paragraphSpacing = 3 //Change space between paragraphs
        underlineAttriString.addAttributes([.paragraphStyle: myParagraphStyle], range: NSRange(location: 0, length: underlineAttriString.length))
        
        
        
        txtViewDownload.attributedText = underlineAttriString
        
    }
    
    
       /// Manage tap on terms and policy and privacy policy
       ///
       /// - Parameter recognizer: Gesture calling this method
       @objc func tapLabel(recognizer: UITapGestureRecognizer) {
           if let textView = recognizer.view as? UITextView {
               
               var location: CGPoint = recognizer.location(in: textView)
               location.x -= textView.textContainerInset.left
               location.y -= textView.textContainerInset.top
               
               
               
               let charIndex = textView.layoutManager.characterIndex(for: location, in: textView.textContainer, fractionOfDistanceBetweenInsertionPoints: nil)
               
               if charIndex < textView.textStorage.length {
                   var range = NSRange(location: 0, length: 0)
                   if (textView.attributedText?.attribute(NSAttributedString.Key(rawValue: "idnum"), at: charIndex, effectiveRange: &range) as? NSString) != nil {
                       let tappedPhrase = (textView.attributedText.string as NSString).substring(with: range)
                       if tappedPhrase == "Click to Download" || tappedPhrase == "Truck It Driver App."
                       {
                           
                           if let aURL =  URL(string: "itms-apps://itunes.apple.com/app/apple-store/id1474751832?mt=8")
                           {
                               UIApplication.shared.open(aURL, options: [UIApplication.OpenExternalURLOptionsKey:Any](), completionHandler: nil)
                           }
                       }
                     
                   }
                   if let desc = textView.attributedText?.attribute(NSAttributedString.Key(rawValue: "desc"), at: charIndex, effectiveRange: &range) as? NSString {
                       print("desc: \(desc)")
                   }
               }
               
           }
       }
    
}


@available(iOS 12.0, *)
extension LoginViewController : ASAuthorizationControllerDelegate {
    @available(iOS 13.0, *)
    func authorizationController(controller: ASAuthorizationController, didCompleteWithError error: Error) {
        //        let alert = UIAlertController(title: "Error", message: error.localizedDescription, preferredStyle: .alert)
        //        alert.addAction(UIAlertAction(title: "Okay", style: .default, handler: nil))
        //        self.present(alert, animated: true, completion: nil)
        //self.showTopMessage(message: "\(error.localizedDescription)", type: .Error)
        print("")
    }
    
    @available(iOS 13.0, *)
    func authorizationController(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) {
        if let appleIDCredential = authorization.credential as? ASAuthorizationAppleIDCredential {
            
            KeychainItem.currentUserIdentifier = appleIDCredential.user
            if appleIDCredential.fullName?.givenName != nil {
                KeychainItem.currentUserFirstName = appleIDCredential.fullName?.givenName
            }
            if appleIDCredential.fullName?.familyName != nil {
                KeychainItem.currentUserLastName = appleIDCredential.fullName?.familyName
            }
            if appleIDCredential.email != nil {
                KeychainItem.currentUserEmail = appleIDCredential.email
            }
            
            self.socialLoginType = SocialLoginType.apple.rawValue
            self.socialLoginId = appleIDCredential.user
            self.appleDict = ["data":authorization.credential]
            self.callLoginApi()
            
            if let identityTokenData = appleIDCredential.identityToken,
                let identityTokenString = String(data: identityTokenData, encoding: .utf8) {
                print("Identity Token \(identityTokenString)")
            }
            
        }
 
    }
}

@available(iOS 12.0, *)
extension LoginViewController : ASAuthorizationControllerPresentationContextProviding {
    @available(iOS 13.0, *)
    func presentationAnchor(for controller: ASAuthorizationController) -> ASPresentationAnchor {
        return self.view.window!
    }
}


extension LoginViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField == txtFieldPhone {
            txtFieldPassword.becomeFirstResponder()
        } else if textField == txtFieldPassword {
            txtFieldPassword.resignFirstResponder()
            self.login()
        }
        return true
    }
}

extension LoginViewController: LoginDisplayLogic {
    func didReceiveLoginResponse(response: Login.Authentication.ViewModel?, message: String, success: String) {
        if success == "1" {
            if let response = response {
                self.router?.redirectToHome(response: response)
            } else {
                AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
            }
        } else if success == "2" {
            if let signUpVc = SignUpViewController.instance() {
                signUpVc.isFromSocial = true
                signUpVc.socialLoginType = self.socialLoginType
                signUpVc.socialLoginId = self.socialLoginId
                signUpVc.socialLoginDict = self.socialLoginDict
                signUpVc.appleDict = self.appleDict
                if self.googleDict != nil {
                    signUpVc.googleDict = self.googleDict
                }
                
                self.navigationController?.pushViewController(signUpVc, animated: true)
            }
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
}

//extension LoginViewController: GIDSignInDelegate {
//    func sign(_ signIn: GIDSignIn!, didSignInFor user: GIDGoogleUser!,
//              withError error: Error!) {
//        if let error = error {
//            print("(error.localizedDescription)")
//        } else {
//            if let user = user {
//                self.socialLoginId = user.userID
//                self.socialLoginType = SocialLoginType.google.rawValue
//                self.googleDict = user
//                self.callLoginApi()
//            }
//        }
//    }
//    
//    func sign(_ signIn: GIDSignIn!, didDisconnectWith user: GIDGoogleUser!,
//              withError error: Error!) {
//    }
//}

//extension LoginViewController: GIDSignInUIDelegate {
//    func sign(inWillDispatch signIn: GIDSignIn!, error: Error!) {
//    }
//
//    // Present a view that prompts the user to sign in with Google
//    func sign( _ signIn: GIDSignIn!,
//               present viewController: UIViewController!) {
//        self.present(viewController, animated: true, completion: nil)
//    }
//
//    // Dismiss the "Sign in with Google" view
//    func sign( _ signIn: GIDSignIn!,
//               dismiss viewController: UIViewController!) {
//        self.dismiss(animated: true, completion: nil)
//    }
//}
