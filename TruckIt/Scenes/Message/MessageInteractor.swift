//
//  MessageInteractor.swift
//  PickUpDriver
//
//  Created by hb on 17/07/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MessageBusinessLogic {
    func readMessages(request: ReadMessage.Request)
    func sendMessages(request: SendMessage.Request)
    func pickupStatus(pickupId: String)
}

protocol MessageDataStore {
    
}

class MessageInteractor: MessageBusinessLogic, MessageDataStore {
    var presenter: MessagePresentationLogic?
    var worker: MessageWorker?
    
    func readMessages(request: ReadMessage.Request) {
        worker = MessageWorker()
        worker?.readMessage(request: request, completionHandler: { (message, successa) in
            self.presenter?.presentReadUnreadMessage(message: message ?? "", success: successa ?? "0")
        })
    }
    
    func sendMessages(request: SendMessage.Request) {
        worker = MessageWorker()
        worker?.sendMessage(request: request, completionHandler: { (message, success) in
            self.presenter?.presentSendMessage(message: message ?? "", success: success ?? "0")
        })
    }
    
    func pickupStatus(pickupId: String) {
         worker = MessageWorker()
        worker?.pickupStatus(pickupId: pickupId, completionHandler: { (response, message, succes) in
            self.presenter?.didReceivePickupStatus(response: response, message: message ?? "", success: succes ?? "0")
        })
    }
}
