//
//  MessageViewController.swift
//  PickUpDriver
//
//  Created by hb on 17/07/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FirebaseCore
import FirebaseDatabase
import IQKeyboardManagerSwift
import FirebaseAnalytics

protocol MessageDisplayLogic: class {
    func didReceiveReadUnreadMessage(message: String, success: String)
    func didReceivePickupStatus(response: PickupStatus.ViewModel?, message: String, success: String)
    func didReceiveSendMessage(message: String, success: String)
}

class MessageViewController: UIViewController {
    var interactor: MessageBusinessLogic?
    var router: (NSObjectProtocol & MessageRoutingLogic & MessageDataPassing)?
    let date = NSDate()
    let formatter = DateFormatter()
    
    @IBOutlet weak var viewProfile: UIView!
    @IBOutlet var bottomView: ChatBottomView!
    @IBOutlet weak var lblName: UILabel!
    @IBOutlet weak var imgViewProfile: UIImageView!
    var driverName = ""
    var driverProfile = ""
    var receiverData = [String: String]()
    var messageArray = [[String:String]]() {
        didSet {
            if messageArray.count == 0 {
                self.tblView.reloadData()
            } else {
                self.tblView.reloadData()
                self.scrollToBottom()
            }
        }
    }
    
    @IBOutlet weak var tblView: UITableView!
    //@IBOutlet weak var viewSend: UIView!
    
    var pickUpId = ""
    var driverId = ""
    var isOngoing = true
    /// Insatance
    ///
    /// - Returns: MessageViewController
    class func instance() -> MessageViewController? {
        return StoryBoard.Message.board.instantiateViewController(withIdentifier: AppClass.MessageVc.rawValue) as? MessageViewController
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = MessageInteractor()
        let presenter = MessagePresenter()
        let router = MessageRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
     if #available(iOS 13.0, *) {
          overrideUserInterfaceStyle = .light
     } else {
          // Fallback on earlier versions
     }
        setupLayout()
        //        self.navigationItem.titleView = viewProfile
        self.configureBottomBar()
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.becomeFirstResponder()
        
    }
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        IQKeyboardManager.shared.enable = false
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        IQKeyboardManager.shared.enable = true
        super.viewDidDisappear(animated)
    }
    
    /// Setup Textfield and UI
    func setupLayout() {
        let userView = UIView(frame: CGRect(x: 0, y: 0, width: (self.view.frame.width), height: 44))
        userView.backgroundColor =  UIColor.clear
        let profileImage = UIImageView(frame: CGRect(x: 0, y: 0, width: 38, height: 38))
        profileImage.layer.cornerRadius = 20
        profileImage.clipsToBounds = true
        let label = UILabel(frame: CGRect(x: (profileImage.frame.width + 10), y: 0, width: (userView.frame.width - (profileImage.frame.width + 10)), height: 40))
        label.textColor  =  #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
        label.textAlignment = .left
        label.font = UIFont(name: "Montserrat-SemiBold", size: 20)
        userView.backgroundColor =  UIColor.clear
        userView.addSubview(profileImage)
        userView.addSubview(label)
        userView.clipsToBounds = true
        profileImage.setImage(with: driverProfile, placeHolder:  #imageLiteral(resourceName: "user_s_14_view_driver"))
        label.text = driverName
        self.navigationItem.titleView = userView
        
        self.lblName.text = self.driverName
        self.imgViewProfile.setImage(with: self.driverProfile,placeHolder:#imageLiteral(resourceName: "sign_up_user"))
        unreadMessage()
        
        getMessage()
    }
    
    /// Call unread message api
    func unreadMessage() {
        let request = ReadMessage.Request(pickUpId: self.pickUpId)
        self.interactor?.readMessages(request: request)
    }
    
    /// Send message tap action
    ///
    /// - Parameter sender: UIButton
    @IBAction func btnSendTapped(_ sender: UIButton) {
        self.view.endEditing(true)
        self.sendMessage()
    }
    
    /// Get time differene from current date
    ///
    /// - Parameter start: start date
    /// - Returns: seconds
    func timeDiffernce(start: Date) -> Int {
        let date1 = start
        let date2 = Date()
        var secondsBetween: TimeInterval? = nil
        secondsBetween = date2.timeIntervalSince(date1)
        return Int(secondsBetween!)
    }
    
    /// Get messages
    func getMessage() {
        let messageDB = Database.database().reference().child("messages")
        messageDB.observe(.childAdded, with: { snapshot in
            let snapshotValue = snapshot.value as! NSDictionary
            let commPairId = snapshotValue["pickUpId"] as! String
            if commPairId == self.pickUpId {
                self.messageArray.append(snapshotValue as! [String : String])
            }
        })
    }
    
    /// Send message
    func sendMessage() {
        let messagesDB = Database.database().reference().child("messages")
        formatter.dateFormat = "MM-dd-yyyy HH:mm:ss"
        formatter.timeZone = NSTimeZone(abbreviation: "UTC")! as TimeZone
        let currTime = formatter.string(from: Date() as Date)
        let message = bottomView.textView.text
        let messageDictionary : NSDictionary = ["receiverId" : self.driverId, "senderId" : TruckItSessionHandler.shared.userId, "message" : bottomView.textView.text, "pickUpId": self.pickUpId, "time": currTime]
        messagesDB.childByAutoId().setValue(messageDictionary) {
            (error, ref) in
            if error != nil {
                print(error!)
            }
            else {
                print("Message saved successfully!")
                let request = SendMessage.Request(pickUpId: self.pickUpId, receiverId: self.driverId, Message: message ?? "")
                self.interactor?.sendMessages(request: request)
                self.bottomView.textView.text = ""
                //   self.placeholderLabel.isHidden = !self.textView.text.isEmpty
            }
        }
    }
    
    /// Scroll table to last index
    func scrollToBottom() {
        DispatchQueue.main.async {
            let indexPath = IndexPath(row: self.messageArray.count-1, section: 0)
            self.tblView.scrollToRow(at: indexPath, at: .bottom, animated: false)
        }
    }
    
    /// Configure bottom bar for message input view
    func configureBottomBar(){
        self.bottomView.updateTableViewEdgeInsets = { edgeInsets in
            self.tblView.contentInset = edgeInsets
        }
        
        self.bottomView.scrollTableToBottom = {
            self.scrollToLastMessage()
        }
        bottomView.sendChatText = { message in
            self.sendMessage()
        }
    }
    
    /// Scroll to last message
    func scrollToLastMessage()
    {
        if self.messageArray.count > 0
        {
            let indexPath = IndexPath(row: self.messageArray.count-1, section: 0)
            self.tblView.scrollToRow(at: indexPath, at: .bottom, animated: false)
        }
    }
    
    override var inputAccessoryView: UIView {
        if  self.bottomView.isHidden
        {
            return UIView(frame: CGRect.zero)
        }
        else
        {
            return bottomView
        }
    }
    
    override var canBecomeFirstResponder: Bool{
        return true
    }
    
}

extension MessageViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return messageArray.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if messageArray[indexPath.row]["receiverId"] == TruckItSessionHandler.shared.userId {
            let cell = tableView.dequeueReusableCell(withIdentifier: DriverCell.cellId, for: indexPath) as! DriverCell
            cell.lblDescription.text = messageArray[indexPath.row]["message"]
            let aDt = GlobalUtility.shared.UTCToLocal(date: messageArray[indexPath.row]["time"]!, format:"MM-dd-yyyy HH:mm:ss")
            cell.lblDate.text = GlobalUtility.shared.timeAgoSinceDate(aDt, numericDates: true)
            return cell
        } else {
            let cell = tableView.dequeueReusableCell(withIdentifier: UserCell.cellId, for: indexPath) as! UserCell
            cell.lblDescriptiom.text = messageArray[indexPath.row]["message"]
            let aDt = GlobalUtility.shared.UTCToLocal(date: messageArray[indexPath.row]["time"]!, format:"MM-dd-yyyy HH:mm:ss")
            cell.lblDate.text = GlobalUtility.shared.timeAgoSinceDate(aDt, numericDates: true)
            return cell
        }
    }
    
    
}

extension MessageViewController: MessageDisplayLogic {
    func didReceiveReadUnreadMessage(message: String, success: String) {
        self.interactor?.pickupStatus(pickupId: self.pickUpId)
    }
    
    func didReceiveSendMessage(message: String, success: String) {
        
    }
    
    func didReceivePickupStatus(response: PickupStatus.ViewModel?, message: String, success: String) {
        if success == "1" {
            if let resp = response {
                isOngoing = !(resp.pickupStatus == ProgressState.Delivered.rawValue)
                bottomView.isHidden = !isOngoing
            }
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
}
