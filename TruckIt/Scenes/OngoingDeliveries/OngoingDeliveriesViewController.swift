//
//  OngoingDeliveriesViewController.swift
//  PickUpUser
//
//  Created by hb on 23/07/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol OngoingDeliveriesDisplayLogic: class {
    func didReceiveDetails(response: PickUpDetail.ViewModel?, message: String, success: String)
}

class OngoingDeliveriesViewController: UIViewController {
    var interactor: OngoingDeliveriesBusinessLogic?
    var router: (NSObjectProtocol & OngoingDeliveriesRoutingLogic & OngoingDeliveriesDataPassing)?
    
    @IBOutlet weak var imgProgress: UIImageView!
    @IBOutlet weak var imgDetail: UIImageView!
    @IBOutlet weak var btnProgress: UIButton!
    @IBOutlet weak var btnDetails: UIButton!
    @IBOutlet weak var containerView: UIView!
    
    var type = "ongoing"
    var userPhone = ""
    var pickUpId = ""
    var isUnreadClear = false
    var pageController : UIPageViewController!
    var currentIndex = 0
    var processVc : OngoingProcessViewController!
    var detailVc : OngoingDetailsViewController!
    
    var arrVC = [UIViewController]()
    
    var details: PickUpDetail.ViewModel?
    /// Insatance
    ///
    /// - Returns: OngoingDeliveriesViewController
    class func instance() -> OngoingDeliveriesViewController? {
        return StoryBoard.OngoingDeliveries.board.instantiateViewController(withIdentifier: AppClass.OngoingDeliveriesVc.rawValue) as? OngoingDeliveriesViewController
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = OngoingDeliveriesInteractor()
        let presenter = OngoingDeliveriesPresenter()
        let router = OngoingDeliveriesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
//         setupLayout()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
         setupLayout()
            if self.isUnreadClear {
            self.navigationItem.rightBarButtonItems = [self.getOtherButton(image: #imageLiteral(resourceName: "speech-bubble-couple-of-black-rectangular-shapes"), selected_image: #imageLiteral(resourceName: "speech-bubble-couple-of-black-rectangular-shapes"), action: #selector(btnChatTapped), target: self), self.getOtherButton(image: #imageLiteral(resourceName: "telephone"), selected_image: #imageLiteral(resourceName: "telephone"), action: #selector(btnCallTapped), target: self)]
        }
    }
    
    /// Initialize Detail, process viewController
    func initializeControllers() {
        if pageController == nil {
            processVc =  OngoingProcessViewController.instance()
            detailVc =  OngoingDetailsViewController.instance()
            
            if self.details != nil {
                self.detailVc.details = self.details
                self.processVc.details = self.details
            }
            
            detailVc.type = self.type
            detailVc.driverTappedCallBack = {id in
                if let driverDetail = DriverProfileViewController.instance() {
                    driverDetail.type = self.type
                    driverDetail.driverId = id
                    driverDetail.pickUpId = self.pickUpId
                    self.navigationController?.pushViewController(driverDetail, animated: true)
                }
                
            }
            
            
            if self.details != nil {
                if self.details?.unreadMessages == "" || self.details?.unreadMessages == "0" {
                    self.navigationItem.rightBarButtonItems = [self.getOtherButton(image: #imageLiteral(resourceName: "speech-bubble-couple-of-black-rectangular-shapes"), selected_image: #imageLiteral(resourceName: "speech-bubble-couple-of-black-rectangular-shapes"), action: #selector(btnChatTapped), target: self), self.getOtherButton(image: #imageLiteral(resourceName: "telephone"), selected_image: #imageLiteral(resourceName: "telephone"), action: #selector(btnCallTapped), target: self)]
                } else {
                    self.navigationItem.rightBarButtonItems = [self.getBadgeButton(image: #imageLiteral(resourceName: "speech-bubble-couple-of-black-rectangular-shapes"), selected_image: #imageLiteral(resourceName: "speech-bubble-couple-of-black-rectangular-shapes"), action: #selector(btnChatTapped), target: self, badgecount: self.details?.unreadMessages ?? "0"), self.getOtherButton(image: #imageLiteral(resourceName: "telephone"), selected_image: #imageLiteral(resourceName: "telephone"), action: #selector(btnCallTapped), target: self)]
                }
            } else {
                self.navigationItem.rightBarButtonItems = [self.getOtherButton(image: #imageLiteral(resourceName: "speech-bubble-couple-of-black-rectangular-shapes"), selected_image: #imageLiteral(resourceName: "speech-bubble-couple-of-black-rectangular-shapes"), action: #selector(btnChatTapped), target: self), self.getOtherButton(image: #imageLiteral(resourceName: "telephone"), selected_image: #imageLiteral(resourceName: "telephone"), action: #selector(btnCallTapped), target: self)]
            }
            
            weak var weakSelf = self
            processVc.parentVC = weakSelf
            detailVc.parentVC = weakSelf
            pageController = UIPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil)
            pageController.isPagingEnabled = true
            pageController.dataSource  = self
            pageController.delegate  = self
            
            arrVC = [detailVc,processVc]
            pageController.setViewControllers([detailVc], direction: .reverse, animated: false, completion: nil)
            
            self.addChild(pageController)
            containerView.addSubview(pageController.view)
            pageController.view.frame = containerView.bounds
        } else {
            if self.currentIndex == 1 {
                self.processVc.details = self.details
                self.processVc.setUpData()
            }
        }
    }
    
    /// call tap action
    @objc func btnCallTapped() {
        if self.userPhone != "" {
            guard let number = URL(string: "tel://" + self.userPhone) else { return }
            UIApplication.shared.open(number)
        } else {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.phoneNotAvailable, type: .Error)
        }
    }
    
    /// Setup Textfield and UI
    func setupLayout() {
        self.navigationItem.title = "Details"
        
        if !(NetworkManager.shared.reachabilityManager?.isReachable)! {
            initializeControllers()
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.networkConnection, type: .Error)
        } else {
            let request = PickUpDetail.Request(pickUpId: self.pickUpId)
            self.interactor?.pickUpDetail(request: request)
        }
        
    }
    
    /// Chat message tap action
    @objc func btnChatTapped() {
        if let message = MessageViewController.instance() {
            message.isOngoing = !(self.details?.pickUpStatus == ProgressState.Delivered.rawValue)
            message.isOngoing = true
            message.pickUpId = self.pickUpId
            message.driverId = self.details?.driverId ?? ""
            message.driverName = self.details?.driverName ?? ""
            message .driverProfile = self.details?.driverProfile ?? ""
            self.isUnreadClear = true
            self.navigationController?.pushViewController(message, animated: true)
        }
    }
    
    /// Button process, detail tap action
    ///
    /// - Parameter sender: UIButton
    @IBAction func btnOptionTapped(_ sender: UIButton) {
        switch sender {
        case btnDetails:
            self.pageController.setViewControllers([(self.detailVc)!], direction: .reverse, animated: true, completion: { (finished) in
                let aVC = self.pageController
                DispatchQueue.main.async {
                    aVC?.setViewControllers([(self.detailVc)!], direction: .forward, animated:true, completion: nil)
                }
            })
            self.checkStatus(index: 0)
        case btnProgress:
            self.pageController.setViewControllers([(self.processVc)!], direction: .forward, animated: true, completion: { (finished) in
                let aVC = self.pageController
                DispatchQueue.main.async {
                    aVC?.setViewControllers([(self.processVc)!], direction: .reverse, animated:true, completion: nil)
                }
            })
            self.checkStatus(index: 1)
        default:
            self.pageController.setViewControllers([(self.detailVc)!], direction: .forward, animated: true, completion: { (finished) in
                let aVC = self.pageController
                DispatchQueue.main.async {
                    aVC?.setViewControllers([(self.detailVc)!], direction: .forward, animated:true, completion: nil)
                }
            })
            self.checkStatus(index: 0)
            
        }
    }
    

 
    
    /// Check Selected viewController status
    ///
    /// - Parameter index: selected index
    func checkStatus(index:Int) {
        switch index {
        case 0:
            btnDetails.isSelected = true
            btnProgress.isSelected = false
            
            imgDetail.isHidden = false
            imgProgress.isHidden = true
            
        case 1:
            btnDetails.isSelected = false
            btnProgress.isSelected = true
            
            imgDetail.isHidden = true
            imgProgress.isHidden = false
           
        default:
            btnDetails.isSelected = true
            btnProgress.isSelected = false
            
            imgDetail.isHidden = false
            imgProgress.isHidden = true
        }
    }
    
}

extension OngoingDeliveriesViewController : UIPageViewControllerDelegate,UIPageViewControllerDataSource {
    
    func pageViewController(_ pageViewController: UIPageViewController, didFinishAnimating finished: Bool, previousViewControllers: [UIViewController], transitionCompleted completed: Bool) {
        if !completed { return }
        
        guard let viewController = previousViewControllers.last else {
            return
        }
        
        self.currentIndex =  (viewController is OngoingDetailsViewController) ? 0 : 1
        // checkStatus(index: self.currentIndex )
    }
    
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController?
    {
        var index =  (viewController is OngoingDetailsViewController) ? 0 : 1
        //checkStatus(index: index)
        
        if (index == 0) || (index == NSNotFound) {
            return nil
        }
        
        index -= 1
        
        return viewControllerAtIndex(index: index)
    }
    
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController?
    {
        var index =  (viewController is OngoingDetailsViewController) ? 0 : 1
        
        
        //checkStatus(index: index)
        if index == NSNotFound {
            return nil
        }
        
        index += 1
        if (index == self.arrVC.count) {
            return nil
        }
        
        return viewControllerAtIndex(index: index)
    }
    
    func viewControllerAtIndex(index: Int) -> UIViewController? {
        if self.arrVC.count == 0 || index >= self.arrVC.count {
            return nil
        }
        
        if index == 0 {
            return detailVc
        } else {
            return processVc
        }
    }
    
}

extension OngoingDeliveriesViewController: OngoingDeliveriesDisplayLogic {
    func didReceiveDetails(response: PickUpDetail.ViewModel?, message: String, success: String) {
        if success == "1" {
            if let response = response {
                self.details = response
                self.userPhone = response.driverPhone ?? ""
                initializeControllers()
            }
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
}
