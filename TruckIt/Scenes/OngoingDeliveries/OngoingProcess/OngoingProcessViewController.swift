//
//  OngoingProcessViewController.swift
//  PickUpUser
//
//  Created by hb on 23/07/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CRRefresh

protocol OngoingProcessDisplayLogic: class {
    func didReceivePickUpstatus(message: String, success: String)
    func didReceiveDetails(response: PickUpDetail.ViewModel?, message: String, success: String)
}

class OngoingProcessViewController: UIViewController {
    var interactor: OngoingProcessBusinessLogic?
    var router: (NSObjectProtocol & OngoingProcessRoutingLogic & OngoingProcessDataPassing)?
    
    @IBOutlet weak var imgPaidOff: UIImageView!
    @IBOutlet weak var imgDelivered: UIImageView!
    @IBOutlet weak var imgEnroute: UIImageView!
    @IBOutlet weak var pickedUp: UIImageView!
    @IBOutlet weak var imgOfferAccepted: UIImageView!
    @IBOutlet weak var imgPosted: UIImageView!
    @IBOutlet weak var btnPosted: UIButton!
    @IBOutlet weak var btnEnroute: UIButton!
    @IBOutlet weak var btnPaidOff: UIButton!
    @IBOutlet weak var btnDelivered: UIButton!
    @IBOutlet weak var btnPickedUp: UIButton!
    @IBOutlet weak var btnOfferAccepted: UIButton!
    
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var btnPaidOdd: UIButton!
    var parentVC : OngoingDeliveriesViewController!
    
    var details: PickUpDetail.ViewModel?
    
    /// Insatance
    ///
    /// - Returns: OngoingProcessViewController
    class func instance() -> OngoingProcessViewController? {
        return StoryBoard.OngoingDeliveries.board.instantiateViewController(withIdentifier: AppClass.OngoingProcessVc.rawValue) as? OngoingProcessViewController
    }
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = OngoingProcessInteractor()
        let presenter = OngoingProcessPresenter()
        let router = OngoingProcessRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        NotificationCenter.default.addObserver(self, selector: #selector(updateUI), name: UIApplication.didBecomeActiveNotification , object: nil)

        scrollView.cr.addHeadRefresh(animator:FastAnimator(frame: scrollView.frame, color: UIColor.lightGray, arrowColor: AppConstants.appColor, lineWidth: 1.5)) { [weak self] in
            let request = PickUpDetail.Request(pickUpId: self?.details?.pickupId ?? "")
            self?.interactor?.pickUpDetail(request: request, showLoader: false)
        }
    }
    
    @objc func updateUI()
    {
        let request = PickUpDetail.Request(pickUpId: self.details?.pickupId ?? "")
        self.interactor?.pickUpDetail(request: request, showLoader: true)
    }
    
    /// Set up progress data to buttons
    func setUpData() {
        btnPaidOdd.isHidden = true
        if let detail = self.details {
            switch detail.pickUpStatus {
            case ProgressState.Posted.rawValue:
                btnPosted.isEnabled = true
                imgPosted.backgroundColor = .clear
                imgPosted.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnPosted.isSelected = true
                
                btnPosted.isEnabled = true
                btnPosted.isSelected = false
                
            case ProgressState.OfferAccepted.rawValue:
                btnPosted.isEnabled = true
                imgPosted.backgroundColor = .clear
                imgPosted.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnPosted.isSelected = true
                
                btnOfferAccepted.isEnabled = true
                imgOfferAccepted.backgroundColor = .clear
                imgOfferAccepted.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnOfferAccepted.isSelected = true
                
                btnPickedUp.isEnabled = true
                btnPickedUp.isSelected = false
                
            case ProgressState.PickedUp.rawValue:
                btnPosted.isEnabled = true
                imgPosted.backgroundColor = .clear
                imgPosted.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnPosted.isSelected = true
                
                btnOfferAccepted.isEnabled = true
                imgOfferAccepted.backgroundColor = .clear
                imgOfferAccepted.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnOfferAccepted.isSelected = true
                
                btnPickedUp.isEnabled = true
                pickedUp.backgroundColor = .clear
                pickedUp.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnPickedUp.isSelected = true
                
                btnEnroute.isEnabled = true
                btnEnroute.isSelected = false
                
            case ProgressState.Enroute.rawValue:
                btnPosted.isEnabled = true
                imgPosted.backgroundColor = .clear
                imgPosted.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnPosted.isSelected = true
                
                btnOfferAccepted.isEnabled = true
                imgOfferAccepted.backgroundColor = .clear
                imgOfferAccepted.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnOfferAccepted.isSelected = true
                
                btnPickedUp.isEnabled = true
                pickedUp.backgroundColor = .clear
                pickedUp.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnPickedUp.isSelected = true
                
                btnEnroute.isEnabled = true
                imgEnroute.backgroundColor = .clear
                imgEnroute.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnEnroute.isSelected = true
                
                btnDelivered.isEnabled = true
                btnDelivered.isSelected = false
                
            case ProgressState.Delivered.rawValue:
                btnPosted.isEnabled = true
                imgPosted.backgroundColor = .clear
                imgPosted.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnPosted.isSelected = true
                
                btnOfferAccepted.isEnabled = true
                imgOfferAccepted.backgroundColor = .clear
                imgOfferAccepted.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnOfferAccepted.isSelected = true
                
                btnPickedUp.isEnabled = true
                pickedUp.backgroundColor = .clear
                pickedUp.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnPickedUp.isSelected = true
                
                btnEnroute.isEnabled = true
                imgEnroute.backgroundColor = .clear
                imgEnroute.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnEnroute.isSelected = true
                
                btnDelivered.isEnabled = true
                imgDelivered.backgroundColor = .clear
                imgDelivered.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnDelivered.isSelected = true
                // btnPaidOdd.isHidden = false
                
            case ProgressState.PaidOff.rawValue:
                btnPosted.isEnabled = true
                imgPosted.backgroundColor = .clear
                imgPosted.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnPosted.isSelected = true
                
                btnOfferAccepted.isEnabled = true
                imgOfferAccepted.backgroundColor = .clear
                imgOfferAccepted.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnOfferAccepted.isSelected = true
                
                btnPickedUp.isEnabled = true
                pickedUp.backgroundColor = .clear
                pickedUp.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnPickedUp.isSelected = true
                
                btnEnroute.isEnabled = true
                imgEnroute.backgroundColor = .clear
                imgEnroute.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnEnroute.isSelected = true
                
                btnDelivered.isEnabled = true
                imgDelivered.backgroundColor = .clear
                imgDelivered.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnDelivered.isSelected = true
                
                btnPaidOff.isEnabled = true
                imgPaidOff.backgroundColor = .clear
                imgPaidOff.image = #imageLiteral(resourceName: "check_icon_circle_outline")
                btnPaidOff.isSelected = true
                
            default:
                break
            }
        }
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        addAnayltics(analyticsParameterItemID: "id-ongoingdeliveryprogressscreen", analyticsParameterItemName: "view_ongoingdeliveryprogressscreen", analyticsParameterContentType: "view_ongoingdeliveryprogressscreen")
        setUpButton()
        setUpData()
        parentVC.currentIndex = 1
        parentVC.checkStatus(index: 1)
        
        let request = PickUpDetail.Request(pickUpId: self.details?.pickupId ?? "")
        self.interactor?.pickUpDetail(request: request, showLoader: true)
    }
    
    /// Set up progress buttons
    func setUpButton() {
        setButtonTint(btn: btnPosted)
        setHighlightedButtonTint(btn: btnPosted)
        setDisableButtonTint(btn:btnPosted)
        
        setButtonTint(btn: btnEnroute)
        setHighlightedButtonTint(btn: btnEnroute)
        setDisableButtonTint(btn:btnEnroute)
        
        setButtonTint(btn: btnPaidOff)
        setHighlightedButtonTint(btn: btnPaidOff)
        setDisableButtonTint(btn:btnPaidOff)
        
        setButtonTint(btn: btnPickedUp)
        setHighlightedButtonTint(btn: btnPickedUp)
        setDisableButtonTint(btn:btnPickedUp)
        
        setButtonTint(btn: btnDelivered)
        setHighlightedButtonTint(btn: btnDelivered)
        setDisableButtonTint(btn:btnDelivered)
        
        setButtonTint(btn: btnOfferAccepted)
        setHighlightedButtonTint(btn: btnOfferAccepted)
        setDisableButtonTint(btn:btnOfferAccepted)
        
        btnPosted.isEnabled = false
        btnOfferAccepted.isEnabled = false
        btnPickedUp.isEnabled = false
        btnEnroute.isEnabled = false
        btnDelivered.isEnabled = false
        btnPaidOff.isEnabled = false
    }
    
    /// Create and set normal background image for option buttons
    ///
    /// - Parameter btn: UIbutton
    func setButtonTint( btn:UIButton ) {
        let aImage = UIImage.getImageWithColor(color: #colorLiteral(red: 0, green: 0.3764705882, blue: 0.9960784314, alpha: 1), size: btn.frame.size)
        btn.setBackgroundImage(aImage, for: .normal)
        btn.setTitleColor(UIColor.white, for: .normal)
    }
    
    /// Create and set heighlighted background image for option buttons
    ///
    /// - Parameter btn: UIbutton
    func setHighlightedButtonTint( btn:UIButton) {
        let aImage = UIImage.getImageWithColor(color: #colorLiteral(red: 0.231372549, green: 0.7607843137, blue: 0.4980392157, alpha: 1), size: btn.frame.size)
        btn.setBackgroundImage(aImage, for: .highlighted)
        btn.setTitleColor(UIColor.white, for: .highlighted)
        btn.setBackgroundImage(aImage, for: .selected)
        btn.setTitleColor(UIColor.white, for: .selected)
    }
    
    /// Create and set heighlighted background image for option buttons
    ///
    /// - Parameter btn: UIbutton
    func setDisableButtonTint( btn:UIButton) {
        let aImage = UIImage.getImageWithColor(color: #colorLiteral(red: 0.5294117647, green: 0.5294117647, blue: 0.5294117647, alpha: 1), size: btn.frame.size)
        btn.setBackgroundImage(aImage, for: .disabled)
        btn.setTitleColor(UIColor.white, for: .disabled)
    }
    
}

extension OngoingProcessViewController: OngoingProcessDisplayLogic {
    func didReceivePickUpstatus(message: String, success: String) {
        
    }
    
    func didReceiveDetails(response: PickUpDetail.ViewModel?, message: String, success: String) {
        if success == "1" {
            if let response = response {
                self.details = response
                self.parentVC.details = response
                setUpButton()
                setUpData()
                self.scrollView.cr.endHeaderRefresh()
            }
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
}
