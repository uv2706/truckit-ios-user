//
//  PastPickUpDetailViewController.swift
//  PickUpDriver
//
//  Created by hb on 11/07/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SKPhotoBrowser

protocol PastPickUpDetailDisplayLogic: class {
    func didReceiveDetails(response: PickUpDetail.ViewModel?, message: String, success: String)
}

class PastPickUpDetailViewController: UIViewController {
    var interactor: PastPickUpDetailBusinessLogic?
    var router: (NSObjectProtocol & PastPickUpDetailRoutingLogic & PastPickUpDetailDataPassing)?
    
    
    @IBOutlet weak var lblHelperNeeded: UILabel!
    
    
    @IBOutlet weak var imgPickedUp: UIImageView!
    @IBOutlet weak var viwTip: UIView!
    
    var pickupId = ""
    var userId = ""
    var givenRating = ("", "")
    var receivedRating = ("", "")
    var details: PickUpDetail.ViewModel?
    var userPhone = ""
    var imageArray = [String]()
    var pickedImage = ""
    var isCanceled = false
    var pickedupImage = ""
    
    @IBOutlet weak var lblTip: UILabel!
    @IBOutlet weak var viewTipAmount: UIView!
    @IBOutlet weak var lblReason: UILabel!
    @IBOutlet weak var viewCancel: UIView!
    @IBOutlet weak var viewDelivered: UIView!
    @IBOutlet weak var btnReceivedRating: UIButton!
    @IBOutlet weak var viewGiveRatingbutton: UIView!
    @IBOutlet weak var viewGivenRatings: UIView!
    @IBOutlet weak var viewGivenRating: SwiftyStarRatingView!
    @IBOutlet weak var lblNoGivenRating: UILabel!
    @IBOutlet weak var lblNoReceivedRating: UILabel!
    @IBOutlet weak var viewReceivedRating: SwiftyStarRatingView!
    @IBOutlet weak var imgPickup: UIImageView!
    @IBOutlet weak var cv: UICollectionView!
    @IBOutlet weak var imgViewUserName: UILabel!
    @IBOutlet weak var imgViewUser: UIImageView!
    @IBOutlet weak var viewUser: UIView!
    @IBOutlet weak var lblEstimatedAmpount: UILabel!
    @IBOutlet weak var lblPickSize: UILabel!
    @IBOutlet weak var lblDropDate: UILabel!
    @IBOutlet weak var lblDropContactNumber: UILabel!
    @IBOutlet weak var lblDropContactName: UILabel!
    @IBOutlet weak var lblDropLocation: UILabel!
    @IBOutlet weak var lblPickDate: UILabel!
    @IBOutlet weak var lblPickContactnumber: UILabel!
    @IBOutlet weak var lblPickContactName: UILabel!
    @IBOutlet weak var lblPickDetailLocation: UILabel!
    
    @IBOutlet weak var viewRating: UIView!
    @IBOutlet weak var viewOfferAmount: UIView!
    
    /// Insatance
    ///
    /// - Returns: PastPickUpDetailViewController
    class func instance() -> PastPickUpDetailViewController? {
        return StoryBoard.PastPickUpDetail.board.instantiateViewController(withIdentifier: AppClass.PastPickUpDetailVc.rawValue) as? PastPickUpDetailViewController
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = PastPickUpDetailInteractor()
        let presenter = PastPickUpDetailPresenter()
        let router = PastPickUpDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupLayout()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        if self.details != nil {
            setData()
        }
    }
    
    /// Set Past Pick up Details
    func setData() {
        if let response = self.details {
            self.imageArray.removeAll()
            if let images = response.pickUpImages {
                for items in images {
                    self.imageArray.append(items.image ?? "")
                }
                cv.reloadData()
            }
            
            if let tip = response.is_tip_added, tip == "1" {
                self.viwTip.isHidden = true
                self.viewTipAmount.isHidden = false
                lblTip.text = "$\(GlobalUtility.shared.roundOffTextTwoDigit(response.tipAmount ?? "0.00"))"
            } else {
                self.viwTip.isHidden = false
                self.viewTipAmount.isHidden = true
            }
            
            self.lblPickDetailLocation.text = response.pickUpLocation
            self.lblDropLocation.text = response.dropOffLocation
            self.lblPickContactName.text = response.pickUpContactName
            self.lblReason.text = response.cancelReason
            self.imgViewUser.setImage(with: response.driverProfile,placeHolder:#imageLiteral(resourceName: "sign_up_user"))
            self.imgViewUserName.text = response.driverName
            self.userId = response.driverId ?? ""
            self.userPhone = response.driverPhone ?? ""
            self.imgPickup.setImage(with: response.deliverdPhoto ,placeHolder:#imageLiteral(resourceName: "pushnotifications_icons"))
            self.pickedImage = response.deliverdPhoto ?? ""
            self.pickedupImage = response.pickedupPhoto ?? ""
            self.imgPickedUp.setImage(with: response.pickedupPhoto, placeHolder: #imageLiteral(resourceName: "pushnotifications_icons"))
            
            self.viewUser.isHidden = (response.driverProfile?.count == 0 && response.driverName?.count == 0)
            self.viewOfferAmount.isHidden = (response.driverProfile?.count == 0 && response.driverName?.count == 0)
            self.viewRating.isHidden = isCanceled
            
            if !self.viewUser.isHidden {
                 self.navigationItem.rightBarButtonItems = [self.getOtherButton(image: #imageLiteral(resourceName: "speech-bubble-couple-of-black-rectangular-shapes"), selected_image: #imageLiteral(resourceName: "speech-bubble-couple-of-black-rectangular-shapes"), action: #selector(btnChatTapped), target: self)]
            }
            
            if response.ratingByDriver == "" {
                self.viewReceivedRating.isHidden = true
                self.btnReceivedRating.isHidden = true
                self.lblNoReceivedRating.isHidden = false
            } else {
                self.viewReceivedRating.isHidden = false
                self.btnReceivedRating.isHidden = false
                self.lblNoReceivedRating.isHidden = true
                self.viewReceivedRating.value = CGFloat(Float(response.ratingByDriver ?? "0.0") ?? 0.0)
                self.receivedRating = (response.ratingByDriver ?? "", response.reviewByDriver ?? "")
            }
            
            if response.ratingByUser == "" {
                self.viewGivenRating.isHidden = true
                self.viewGiveRatingbutton.isHidden = false
            } else {
                self.viewGivenRating.isHidden = false
                self.viewGiveRatingbutton.isHidden = true
                self.viewGivenRating.value = CGFloat(Float(response.ratingByUser ?? "0.0") ?? 0.0)
                self.givenRating = (response.ratingByUser ?? "", response.reviewByUser ?? "")
            }
            
            var aStr = response.pickUpContactNumber?.replacingOccurrences(of: " ", with: "").replacingOccurrences(of: "(", with: "").replacingOccurrences(of: ")", with: "").replacingOccurrences(of: "-", with: "")
            if (aStr!.count) >= 10
            {
                aStr = aStr!.substring(start: 0, end: 10)
            }
            let str = aStr!.toPhoneNumber()
            self.lblPickContactnumber.text = str
            self.lblDropContactName.text = response.dropContactName
            
            var aStr1 = response.dropContactNumber?.replacingOccurrences(of: " ", with: "").replacingOccurrences(of: "(", with: "").replacingOccurrences(of: ")", with: "").replacingOccurrences(of: "-", with: "")
            if (aStr1!.count) >= 10
            {
                aStr1 = aStr1!.substring(start: 0, end: 10)
            }
            let str1 = aStr1!.toPhoneNumber()
            self.lblDropContactNumber.text = str1
            
            self.lblPickSize.text = "\(response.size ?? ""): \(response.sizeInLbs ?? "")"
            self.lblEstimatedAmpount.text = "$\(GlobalUtility.shared.roundOffTextTwoDigit(response.offerAmount ?? "0.00"))"
            self.lblHelperNeeded.text = (response.helper_required ?? "").uppercased()
            
            if (response.helper_required ?? "") == "Yes" {
                self.lblHelperNeeded.textColor = UIColor(named: "AppGreenColor")
            }else {
                self.lblHelperNeeded.textColor = #colorLiteral(red: 0, green: 0, blue: 0, alpha: 1)
            }
            
            lblPickDate.text = GlobalUtility.shared.getFormattedDate(date: response.pickUpAt ?? "0000-00-00 00:00:00")
            lblDropDate.text = GlobalUtility.shared.getFormattedDate(date: response.pickUpAt ?? "0000-00-00 00:00:00")
        }
    }
    
    /// View user Profile tap action
    ///
    /// - Parameter sender: UIButton
    @IBAction func btnUserTapped(_ sender: Any) {
        if let userProfile = DriverProfileViewController.instance() {
            userProfile.driverId = self.userId
            userProfile.type = "past"
            userProfile.pickUpId = self.pickupId
            self.navigationController?.pushViewController(userProfile, animated: true)
        }
    }
    
    @IBAction func btnPickedPhotoTapped(_ sender: UIButton) {
        if self.pickedupImage != "" {
            self.showImageDetailView(arrImage: [self.pickedupImage])
        }
    }
    
    /// Setup Textfield and UI
    func setupLayout() {
        self.navigationItem.title = "Details"
       
        
        cv.delegate = self
        cv.dataSource = self
        
        viewDelivered.isHidden = self.isCanceled
        viewCancel.isHidden = !self.isCanceled
        
        let request = PickUpDetail.Request(pickUpId: self.pickupId)
        self.interactor?.pickUpDetail(request: request)
    }
    
    /// View Chat tap action
    @objc func btnChatTapped() {
        if let message = MessageViewController.instance() {
            message.isOngoing = false
            message.pickUpId = self.pickupId
            message.driverId = self.details?.driverId ?? ""
            message.driverName = self.details?.driverName ?? ""
            message .driverProfile = self.details?.driverProfile ?? ""
            self.navigationController?.pushViewController(message, animated: true)
        }
    }
    
    
    @IBAction func btnPickUpLocationAction(_ sender: Any) {
        GlobalUtility.shared.showMapOption(latitude:self.details?.pickUpLatitude ?? "", longitude:self.details?.pickUpLongitude ?? "", address:self.lblPickDetailLocation.text ?? "",target: self)
        
    }
    @IBAction func btnDropOffLocationAction(_ sender: Any) {
          GlobalUtility.shared.showMapOption(latitude:self.details?.dropOffLatitude ?? "", longitude:self.details?.dropOffLongitude ?? "", address:self.details?.dropOffLocation ?? "",target: self)
    }
    
    /// Show received ratings tap action
    ///
    /// - Parameter sender: UIButton
    @IBAction func btnShowReceivedRatings(_ sender: Any) {
        if let rasting = RatingPopupViewController.instance() {
            rasting.data = self.receivedRating
            self.present(rasting, animated: true, completion: nil)
        }
    }
    
    /// Show given ratings tap action
    ///
    /// - Parameter sender: UIButton
    @IBAction func btnshowGivenRatings(_ sender: Any) {
        if let rasting = RatingPopupViewController.instance() {
            rasting.data = self.givenRating
            self.present(rasting, animated: true, completion: nil)
        }
    }
    
    /// show delivered image tap action
    ///
    /// - Parameter sender: UIButton
    @IBAction func btnDeliveredPicTapped(_ sender: Any) {
        if self.pickedImage != "" {
            self.showImageDetailView(arrImage: [self.pickedImage])
        }
    }
    
    /// show delivered image tap action
    ///
    /// - Parameter sender: UIButton
    @IBAction func btnTipTapped(_ sender: Any) {
        if let rasting = TipViewController.instance() {
            rasting.tips = self.details?.tips ?? [String]()
            rasting.amount = self.details?.offerAmount ?? ""
            rasting.pickupId = self.details?.pickupId ?? ""
            rasting.submitCallBack = { request in
                if let payment = PaymentCardListingViewController.instance() {
                    payment.tipRequest = request
                    payment.isForTip = true
                    self.navigationController?.pushViewController(payment, animated: true)
                }
            }
            self.present(rasting, animated: true, completion: nil)
        }
    }
    
    /// Give ratings to driver action
    ///
    /// - Parameter sender: UIButton
    @IBAction func btnGiveRating(_ sender: Any) {
        if let reportVc = GiveRatingViewController.instance() {
            reportVc.driverId = self.userId
            reportVc.pickUpId = self.pickupId
            reportVc.completion = {
                let request = PickUpDetail.Request(pickUpId: self.pickupId)
                self.interactor?.pickUpDetail(request: request)
            }
            self.present(reportVc, animated: true, completion: nil)
        }
    }
    
}

extension PastPickUpDetailViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.imageArray.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ImageCell.cellId, for: indexPath) as! ImageCell
        cell.imgView.setImage(with: self.imageArray[indexPath.row],placeHolder:#imageLiteral(resourceName: "no_img"))
        cell.buttonTapped = {index in
            self.showImageDetailView(arrImage: [self.imageArray[indexPath.row]])
        }
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: 120, height: 120)
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
    }
}

extension PastPickUpDetailViewController: PastPickUpDetailDisplayLogic {
    func didReceiveDetails(response: PickUpDetail.ViewModel?, message: String, success: String) {
        if success == "1" {
            if let response = response {
                self.details = response
                setData()
            }
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
}

