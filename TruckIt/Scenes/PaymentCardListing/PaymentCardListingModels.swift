//
//  PaymentCardListingModels.swift
//  ForgetMeKnots
//
//  Created by hb on 23/05/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum PaymentCardListing {

    class ViewModel: WSResponseData {
        var id : String?
        var object : String?
        var address_city : String?
        var address_country : String?
        var address_line1 : String?
        var address_line1_check : String?
        var address_line2 : String?
        var address_state : String?
        var address_zip : String?
        var address_zip_check : String?
        var brand : String?
        var country : String?
        var customer : String?
        var cvc_check : String?
        var dynamic_last4 : String?
        var exp_month : Int?
        var exp_year : Int?
        var fingerprint : String?
        var funding : String?
        var last4 : String?
//        var metadata : [String]?
        var name : String?
        var tokenization_method : String?
        
        enum CodingKeys: String, CodingKey {
            case id
            case object
            case address_city
            case address_country
            case address_line1
            case address_line1_check
            case address_line2
            case address_state
            case address_zip
            case address_zip_check
            case brand
            case country
            case customer
            case cvc_check
            case dynamic_last4
            case exp_month
            case exp_year
            case fingerprint
            case funding
            case last4
//            case metadata
            case name
            case tokenization_method
        }
        
        required init(from decoder: Decoder) throws {
            try super.init(from: decoder)
            let values = try decoder.container(keyedBy: CodingKeys.self)
            id = try values.decodeIfPresent(String.self, forKey: .id)
            address_city = try values.decodeIfPresent(String.self, forKey: .address_city)
            address_country = try values.decodeIfPresent(String.self, forKey: .address_country)
            address_line1 = try values.decodeIfPresent(String.self, forKey: .address_line1)
            address_line1_check = try values.decodeIfPresent(String.self, forKey: .address_line1_check)
            address_line2 = try values.decodeIfPresent(String.self, forKey: .address_line2)
            address_state = try values.decodeIfPresent(String.self, forKey: .address_state)
            address_zip = try values.decodeIfPresent(String.self, forKey: .address_zip)
            address_zip_check = try values.decodeIfPresent(String.self, forKey: .address_zip_check)
            brand = try values.decodeIfPresent(String.self, forKey: .brand)
            country = try values.decodeIfPresent(String.self, forKey: .country)
            customer = try values.decodeIfPresent(String.self, forKey: .customer)
            cvc_check = try values.decodeIfPresent(String.self, forKey: .cvc_check)
            dynamic_last4 = try values.decodeIfPresent(String.self, forKey: .dynamic_last4)
            exp_month = try values.decodeIfPresent(Int.self, forKey: .exp_month)
            exp_year = try values.decodeIfPresent(Int.self, forKey: .exp_year)
            fingerprint = try values.decodeIfPresent(String.self, forKey: .fingerprint)
            funding = try values.decodeIfPresent(String.self, forKey: .funding)
            last4 = try values.decodeIfPresent(String.self, forKey: .last4)
//            metadata = try values.decodeIfPresent(String.self, forKey: .metadata)
            name = try values.decodeIfPresent(String.self, forKey: .name)
            tokenization_method = try values.decodeIfPresent(String.self, forKey: .tokenization_method)
        }
        
        public override func encode(to encoder: Encoder) throws {
            try super.encode(to: encoder)
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(id, forKey: .id)
            try container.encode(address_city, forKey: .address_city)
            try container.encode(address_country, forKey: .address_country)
            try container.encode(address_line1, forKey: .address_line1)
            try container.encode(address_line1_check, forKey: .address_line1_check)
            try container.encode(address_line2, forKey: .address_line2)
            try container.encode(address_state, forKey: .address_state)
            try container.encode(address_zip, forKey: .address_zip)
            try container.encode(address_zip_check, forKey: .address_zip_check)
            try container.encode(brand, forKey: .brand)
            try container.encode(country, forKey: .country)
            try container.encode(customer, forKey: .customer)
            try container.encode(cvc_check, forKey: .cvc_check)
            try container.encode(dynamic_last4, forKey: .dynamic_last4)
            try container.encode(exp_month, forKey: .exp_month)
            try container.encode(exp_year, forKey: .exp_year)
            try container.encode(fingerprint, forKey: .fingerprint)
            try container.encode(funding, forKey: .funding)
            try container.encode(last4, forKey: .last4)
//            try container.encode(metadata, forKey: .metadata)
            try container.encode(name, forKey: .name)
            try container.encode(tokenization_method, forKey: .tokenization_method)
        }
    }
}

enum RemoveCard{
    struct Request {
        var cardId: String
    }
    
    class ViewModel: WSResponseData {
        public override func encode(to encoder: Encoder) throws {
            try super.encode(to: encoder)
        }
        
        required public init(from decoder: Decoder) throws {
            try super.init(from: decoder)
        }
    }
}

