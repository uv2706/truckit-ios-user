//
//  PaymentCardListingViewController.swift
//  ForgetMeKnots
//
//  Created by hb on 23/05/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RevealingTableViewCell
import CRRefresh

protocol PaymentCardListingDisplayLogic: class {
    func didReceiveRemoveCard(message: String, success:String)
    func didReceiveCardList(response: [PaymentCardListing.ViewModel]?, message: String, success:String)
    func didReceiveAcceptRejectOffer(message: String, success: String)
    func didReceiveAddTip(message: String, success: String)
}

class PaymentCardListingViewController: UIViewController {
    @IBOutlet weak var lblNoRecord: UILabel!
    @IBOutlet weak var tblView: UITableView!
    
    @IBOutlet weak var viewNoRecord: UIView!
    @IBOutlet weak var btnAdd: UIButton!
    
    var tipRequest : Tip.Request?
    var isFromSetting = false
    var isForTip = false
    var totalcount = 0
    var selectedIndexPath: IndexPath?
    var selectedCard: PaymentCardListing.ViewModel?
    
    var interactor: PaymentCardListingBusinessLogic?
    var router: (NSObjectProtocol & PaymentCardListingRoutingLogic & PaymentCardListingDataPassing)?
    
    var cardList = [PaymentCardListing.ViewModel]()
    var cardId = ""
    
    var request: AcceptRejectOffer.Request?
    // Insatance
    ///
    /// - Returns: PaymentCardListingViewController
    class func instance() -> PaymentCardListingViewController? {
        return StoryBoard.PaymentCardListing.board.instantiateViewController(withIdentifier: AppClass.PaymentCardListingVc.rawValue) as? PaymentCardListingViewController
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = PaymentCardListingInteractor()
        let presenter = PaymentCardListingPresenter()
        let router = PaymentCardListingRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
     if #available(iOS 13.0, *) {
          overrideUserInterfaceStyle = .light
     } else {
          // Fallback on earlier versions
     }
        setupLayout()
    }
    
    /// Setup UI
    func setupLayout() {
        self.navigationItem.title = "My Payment Methods"
        self.tblView.delegate = self
        self.tblView.dataSource = self
        
        btnAdd.layer.borderColor = #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
        btnAdd.layer.borderWidth = 1
        tblView.cr.addHeadRefresh(animator:FastAnimator(frame: tblView.frame, color: UIColor.lightGray, arrowColor: AppConstants.appColor, lineWidth: 1.5)) { [weak self] in
            self?.interactor?.cardList(Indicator: false)
        }
        
        if !(NetworkManager.shared.reachabilityManager?.isReachable)! {
            lblNoRecord.text = AlertMessage.networkConnection
            viewNoRecord.isHidden = false
        } else {
            self.interactor?.cardList(Indicator: true)
        }
    }
    
    /// Add card tap action
    ///
    /// - Parameter sender: UIButton
    @IBAction func addCard(_ sender: UIButton) {
        if let addCardVc = AddPaymentCardViewController.instance() {
            self.navigationController?.pushViewController(addCardVc, animated: true)
        }
    }
    
}

extension PaymentCardListingViewController: UITableViewDelegate, UITableViewDataSource, RevealingTableViewCellDelegate, UIScrollViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.cardList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: PaymentCardCell.celllId, for: indexPath) as! PaymentCardCell
        cell.setData(data: self.cardList[indexPath.row])
        cell.buttonDeleteClicked = {index in
            self.displayAlert(msg: AlertMessage.deletePaymentCard, ok: "Yes", cancel: "No", okAction: {
                self.addAnayltics(analyticsParameterItemID: "id-deletepaymentmethod", analyticsParameterItemName: "click_deletepaymentmethod", analyticsParameterContentType: "click_deletepaymentmethod")
                
                let request = RemoveCard.Request(cardId: self.cardList[indexPath.row].id ?? "")
                self.cardId = self.cardList[indexPath.row].id ?? ""
                self.interactor?.removeCard(request: request)
            }, cancelAction: nil)
        }
        cell.revealingCellDelegate = self
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if !isFromSetting {
            
            self.displayAlert(msg: "Are you sure you want to pay from this card ending with \(self.cardList[indexPath.row].last4 ?? "")?", ok: "Yes", cancel: "No", okAction: {
                if self.isForTip {
                    self.tipRequest?.stripeCardId = self.cardList[indexPath.row].id ?? ""
                    self.interactor?.addTip(request: self.tipRequest!)
                } else {
                    self.request?.cardId = self.cardList[indexPath.row].id ?? ""
                    self.interactor?.acceptRejectOrder(request: self.request!)
                }
            }, cancelAction: nil)
        }
    }
    
    func didStartPanGesture(cell: RevealingTableViewCell) {
        self.tblView.closeAllCells(exceptThisOne: cell)
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        self.tblView.closeAllCells()
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
}

extension PaymentCardListingViewController: PaymentCardListingDisplayLogic {
    func didReceiveRemoveCard(message: String, success:String) {
        if success == "1" {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Success)
            let index = self.cardList.lastIndex { (card) -> Bool in
                card.id == self.cardId
            }
            if let index = index {
                self.cardList.remove(at: index)
                self.tblView.reloadData()
            }
            if self.cardList.count == 0 {
                viewNoRecord.isHidden = false
                lblNoRecord.text = "No Card Available."
            }
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
    
    func didReceiveCardList(response: [PaymentCardListing.ViewModel]?, message: String, success:String) {
        if success == "1" {
            if let response = response {
                self.viewNoRecord.isHidden = true
                self.cardList = response
                self.tblView.reloadData()
                self.tblView.cr.endHeaderRefresh()
            }
        } else {
            self.viewNoRecord.isHidden = false
            self.lblNoRecord.text = message
            self.cardList.removeAll()
            self.tblView.reloadData()
            self.tblView.cr.endHeaderRefresh()
        }
    }
    
    func didReceiveAcceptRejectOffer(message: String, success: String) {
        if success == "1" {
            self.dismiss(animated: true, completion: nil)
            AppConstants.appDelegate.showTopMessage(message: message, type: .Success)
            if let pickUpVc = self.navigationController?.viewControllers[(self.navigationController?.viewControllers.count ?? 0)-3] as? DeliveriesViewController {
                pickUpVc.setOngoingVc()
                self.navigationController?.popToViewController(pickUpVc, animated: true)
            } else {
                self.navigationController?.popToRootViewController(animated: true)
            }
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
    
    func didReceiveAddTip(message: String, success: String) {
        if success == "1" {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Success)
            if let pickUpVc = self.navigationController?.viewControllers[(self.navigationController?.viewControllers.count ?? 0)-2] as? PastPickUpDetailViewController {
                pickUpVc.details?.is_tip_added = "1"
                self.navigationController?.popToViewController(pickUpVc, animated: true)
            } else {
                self.navigationController?.popToRootViewController(animated: true)
            }
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
}
