//
//  PaymentCardListingWorker.swift
//  ForgetMeKnots
//
//  Created by hb on 23/05/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class PaymentCardListingWorker {
    func cardList(Indicator: Bool,completionHandler: @escaping ([PaymentCardListing.ViewModel]?, _ message: String?, _ successCode: String?) -> Void) {
        NetworkService.dataRequest(with: PaymentAPIRouter.cardList, showLoader: Indicator) { (responce: WSResponse<PaymentCardListing.ViewModel>?, error: NetworkError?) in
            if let detail = responce {
                if let resparray = detail.arrayData, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                    completionHandler(resparray, msg, detail.setting?.success)
                } else {
                    completionHandler(nil, detail.setting?.message, detail.setting?.success)
                }
            } else {
                completionHandler(nil, error?.errorMessage() ?? AlertMessage.defaultError, "0")
            }
        }
    }
    
    func removeCard(request: RemoveCard.Request, completionHandler: @escaping (_ message: String?, _ successCode: String?) -> Void) {
        NetworkService.dataRequest(with: PaymentAPIRouter.removeCard(request: request), showLoader: true) { (responce: WSResponse<RemoveCard.ViewModel>?, error: NetworkError?) in
            if let detail = responce {
                if let _ = detail.arrayData, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                    completionHandler( msg, detail.setting?.success)
                } else {
                    completionHandler(detail.setting?.message, detail.setting?.success)
                }
            } else {
                completionHandler( error?.errorMessage() ?? AlertMessage.defaultError, "0")
            }
        }
    }
    

    func acceptRejectOfffer(request: AcceptRejectOffer.Request, completionHandler: @escaping (_ message: String?, _ successCode: String?) -> Void) {
        NetworkService.dataRequest(with: PickUpDetailAPIRouter.acceptRejectOffer(request: request), showLoader: true) { (responce: WSResponse<AcceptRejectOffer.ViewModel>?, error: NetworkError?) in
            if let detail = responce {
                if let _ = detail.arrayData, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                    completionHandler( msg, detail.setting?.success)
                } else {
                    completionHandler(detail.setting?.message, detail.setting?.success)
                }
            } else {
                completionHandler(error?.errorMessage() ?? AlertMessage.defaultError, "0")
            }
        }
    }
    
    func addTip(request: Tip.Request, completionHandler: @escaping (_ message: String?, _ successCode: String?) -> Void) {
        NetworkService.dataRequest(with: PickUpDetailAPIRouter.addTip(request: request), showLoader: true) { (responce: WSResponse<AcceptRejectOffer.ViewModel>?, error: NetworkError?) in
            if let detail = responce {
                if let _ = detail.arrayData, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                    completionHandler( msg, detail.setting?.success)
                } else {
                    completionHandler(detail.setting?.message, detail.setting?.success)
                }
            } else {
                completionHandler(error?.errorMessage() ?? AlertMessage.defaultError, "0")
            }
        }
    }
    
}
