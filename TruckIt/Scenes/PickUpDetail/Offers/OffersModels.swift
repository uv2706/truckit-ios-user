//
//  OffersModels.swift
//  PickUpUser
//
//  Created by hb on 18/06/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum Offers {
    struct Request {
        var pickUpId: String
    }
    
    class ViewModel: WSResponseData {
        var driverName : String?
        var message: String?
        var amount : String?
        var offerId: String?
        var status: String?
        var driverId: String?
        var make : String?
        var model: String?
        var year : String?
        var image: [String]?
        var licence: String?
        var vehicleId: String?
        var vehicleMasterId: String?
        
        private enum CodingKeys: String, CodingKey {
            case driver_name
            case message
            case amount
            case offer_id
            case status
            case driver_id
            case vm_make
            case vm_model
            case vm_year
            case images
            case license_plate
            case vehicle_id
            case vehicle_master_id
        }
        
        public override func encode(to encoder: Encoder) throws {
            try super.encode(to: encoder)
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(driverName, forKey: .driver_name)
            try container.encode(message, forKey: .message)
            try container.encode(amount, forKey: .amount)
            try container.encode(offerId, forKey: .offer_id)
            try container.encode(status, forKey: .status)
            try container.encode(driverId, forKey: .driver_id)
            try container.encode(make, forKey: .vm_make)
            try container.encode(model, forKey: .vm_model)
            try container.encode(year, forKey: .vm_year)
            try container.encode(image, forKey: .images)
            try container.encode(licence, forKey: .license_plate)
            try container.encode(vehicleId, forKey: .vehicle_id)
            try container.encode(vehicleMasterId, forKey: .vehicle_master_id)
        }
        
        required public init(from decoder: Decoder) throws {
            try super.init(from: decoder)
            let values = try decoder.container(keyedBy: CodingKeys.self)
            driverName = try values.decodeIfPresent(String.self, forKey: .driver_name)
            message = try values.decodeIfPresent(String.self, forKey: .message)
            amount = try values.decodeIfPresent(String.self, forKey: .amount)
            offerId = try values.decodeIfPresent(String.self, forKey: .offer_id)
            status = try values.decodeIfPresent(String.self, forKey: .status)
            driverId = try values.decodeIfPresent(String.self, forKey: .driver_id)
            make = try values.decodeIfPresent(String.self, forKey: .vm_make)
            model = try values.decodeIfPresent(String.self, forKey: .vm_model)
            year = try values.decodeIfPresent(String.self, forKey: .vm_year)
            image = try values.decodeIfPresent([String].self, forKey: .images)
            licence = try values.decodeIfPresent(String.self, forKey: .license_plate)
            vehicleId = try values.decodeIfPresent(String.self, forKey: .vehicle_id)
            vehicleMasterId = try values.decodeIfPresent(String.self, forKey: .vehicle_master_id)
        }
    }
}
