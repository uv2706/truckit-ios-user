//
//  OffersViewController.swift
//  PickUpUser
//
//  Created by hb on 18/06/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CRRefresh

protocol OffersDisplayLogic: class {
    func didReceiveOffers(response: [Offers.ViewModel]?, message: String, success: String)
}

class OffersViewController: UIViewController {
    var interactor: OffersBusinessLogic?
    var router: (NSObjectProtocol & OffersRoutingLogic & OffersDataPassing)?
    
    @IBOutlet weak var viewNoRecord: UIView!
    @IBOutlet weak var lblNoRecord: UILabel!
    @IBOutlet weak var tblView: UITableView!
    var pickUpId = ""
    var pickDetail: PickUpDetail.ViewModel?
    var offers = [Offers.ViewModel]()
    
    var parentVC : PickUpDetailViewController!
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    /// Insatance
    ///
    /// - Returns: OffersViewController
    class func instance() -> OffersViewController? {
        return StoryBoard.PickUpDetail.board.instantiateViewController(withIdentifier: AppClass.OffersVc.rawValue) as? OffersViewController
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = OffersInteractor()
        let presenter = OffersPresenter()
        let router = OffersRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.tblView.delegate = self
        self.tblView.dataSource = self
        
        tblView.cr.addHeadRefresh(animator:FastAnimator(frame: tblView.frame, color: UIColor.white, arrowColor: AppConstants.appColor, lineWidth: 1.5))  { [weak self] in
            let req = Offers.Request(pickUpId: self?.pickUpId ?? "")
            self?.interactor?.offers(request: req, showLoader: false)
        }
        
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        addAnayltics(analyticsParameterItemID: "id-pendingdeliveryofferscreen", analyticsParameterItemName: "view_pendingdeliveryofferscreen", analyticsParameterContentType: "view_pendingdeliveryofferscreen")
        
        parentVC.currentIndex = 1
        parentVC.checkStatus(index: 1)
        
        if !(NetworkManager.shared.reachabilityManager?.isReachable)! {
            lblNoRecord.text = AlertMessage.networkConnection
            viewNoRecord.isHidden = false
        } else {
            let req = Offers.Request(pickUpId: self.pickUpId)
            self.interactor?.offers(request: req, showLoader: true)
        }
    }
    
}

extension OffersViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return offers.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: OfferCell.cellId, for: indexPath) as! OfferCell
        
        let text = "\(offers[indexPath.row].driverName ?? "") made an offer of $\(GlobalUtility.shared.roundOffTextTwoDigit(offers[indexPath.row].amount ?? "")) USD"
        
        cell.lblOffer.addAttributeString(mainString: text, subString: offers[indexPath.row].driverName ?? "", subStringFont: UIFont(name: "Montserrat-Medium", size: cell.lblOffer.font.pointSize) ?? cell.lblOffer.font, subStringColor: #colorLiteral(red: 0, green: 0.4784313725, blue: 1, alpha: 1))
        
        cell.lblOffer.addAttributeAgain(mainString: cell.lblOffer.attributedText!, subString: "$\(GlobalUtility.shared.roundOffTextTwoDigit(offers[indexPath.row].amount ?? "")) USD", subStringFont: UIFont(name: "Montserrat-Medium", size: cell.lblOffer.font.pointSize) ?? cell.lblOffer.font, subStringColor: #colorLiteral(red: 0, green: 0.4784313725, blue: 1, alpha: 1))
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if let accept = AcceptRejectOfferViewController.instance() {
            accept.offer = offers[indexPath.row]
            accept.pickDetail = self.pickDetail
            accept.callBack = {
                if let driverInfo = DriverProfileViewController.instance() {
                    driverInfo.type = "pending"
                    driverInfo.driverId = self.offers[indexPath.row].driverId ?? ""
                    self.navigationController?.pushViewController(driverInfo, animated: true)
                }
            }
            accept.rejectCallBack = {
                let req = Offers.Request(pickUpId: self.pickUpId)
                self.interactor?.offers(request: req, showLoader: false)
            }
            accept.acceptCallBack = {req in
                if let payment = PaymentCardListingViewController.instance() {
                    payment.request = req
                    self.navigationController?.pushViewController(payment, animated: true)
                }
                
            }
            self.present(accept, animated: true, completion: nil)
        }
    }
}

extension OffersViewController: OffersDisplayLogic {
    func didReceiveOffers(response: [Offers.ViewModel]?, message: String, success: String) {
        if success == "1" {
            self.tblView.cr.endHeaderRefresh()
            if let response = response {
                self.viewNoRecord.isHidden = true
                self.offers = response
                self.tblView.reloadData()
            }
        } else {
            self.tblView.cr.endHeaderRefresh()
            self.viewNoRecord.isHidden = false
            self.offers.removeAll()
            self.tblView.reloadData()
            self.lblNoRecord.text = message
        }
    }
}
