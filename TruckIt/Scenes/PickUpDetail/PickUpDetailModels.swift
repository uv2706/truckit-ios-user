//
//  PickUpDetailModels.swift
//  PickUpUser
//
//  Created by hb on 17/06/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum PickUpDetail {
    
    struct Request {
        var pickUpId: String
    }
    
    class ViewModel: WSResponseData {
        var isOfferApplied : String?
        var userName : String?
        var pickUpImages: [Images]?
        var pickupId : String?
        var pickUpLocation: String?
        var userId: String?
        var pickUpLatitude: String?
        var pickUpLongitude: String?
        var sizeId : String?
        var pickUpAt : String?
        var pickUpContactName: String?
        var pickUpContactNumber: String?
        var dropOffLocation: String?
        var dropOffLatitude: String?
        var dropOffLongitude : String?
        var dropOffAt : String?
        var dropContactName : String?
        var dropContactNumber : String?
        var estimatedAmount : String?
        var driverId : String?
        var pickUpStatus : String?
        var driverName: String?
        var userProfile: String?
        var size: String?
        var sizeInLbs: String?
        var offerAmount: String?
        var driverProfile: String?
        
        var isPending : String?
        var reviewByDriver : String?
        var ratingByDriver: String?
        var reviewByUser: String?
        var ratingByUser: String?
        var driverPhone: String?
        var userPhone: String?
        var deliverdPhoto: String?
        var unreadMessages: String?
        var cancelReason: String?
        var tips: [String]?
        var is_tip_added: String?
        var tipAmount: String?
        var pickedupPhoto: String?
        
        var helper_required: String?
        
        private enum CodingKeys: String, CodingKey {
            case is_offer_applied
            case user_name
            case pick_up_images
            case pickup_id
            case pick_up_location
            case user_id
            case pick_up_latitude
            case pick_up_longitude
            case size_id
            case pick_up_at
            case pick_up_contact_name
            case pick_up_contact_number
            case drop_off_location
            case drop_off_latitude
            case drop_off_longitude
            case drop_off_at
            case drop_contact_name
            case drop_contact_number
            case estimated_amount
            case driver_id
            case pick_up_status
            case driver_name
            case user_profile
            case size
            case size_in_lbs
            case offer_amount
            case driver_profile
            
            case is_pending
            case rating_by_user
            case review_by_user
            case rating_by_driver
            case review_by_driver
            case driver_phone
            case user_phone
            case delivered_photo
            case unread_messages
            case cancelled_reason
            case tips
            case is_tip_added
            case tip_amount
            case pickedup_photo
            
            case helper_required
        }
        
        public override func encode(to encoder: Encoder) throws {
            try super.encode(to: encoder)
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(isOfferApplied, forKey: .is_offer_applied)
            try container.encode(userName, forKey: .user_name)
            try container.encode(pickUpImages, forKey: .pick_up_images)
            try container.encode(pickupId, forKey: .pickup_id)
            try container.encode(pickUpLocation, forKey: .pick_up_location)
            try container.encode(userId, forKey: .user_id)
            try container.encode(pickUpLatitude, forKey: .pick_up_latitude)
            try container.encode(pickUpLongitude, forKey: .pick_up_longitude)
            try container.encode(sizeId, forKey: .size_id)
            try container.encode(pickUpAt, forKey: .pick_up_at)
            try container.encode(pickUpContactName, forKey: .pick_up_contact_name)
            try container.encode(pickUpContactNumber, forKey: .pick_up_contact_number)
            try container.encode(dropOffLocation, forKey: .drop_off_location)
            try container.encode(dropOffLatitude, forKey: .drop_off_latitude)
            try container.encode(dropOffLongitude, forKey: .drop_off_longitude)
            try container.encode(dropOffAt, forKey: .drop_off_at)
            try container.encode(dropContactName, forKey: .drop_contact_name)
            try container.encode(dropContactNumber, forKey: .drop_contact_number)
            try container.encode(estimatedAmount, forKey: .estimated_amount)
            try container.encode(driverId, forKey: .driver_id)
            try container.encode(pickUpStatus, forKey: .pick_up_status)
            try container.encode(driverName, forKey: .driver_name)
            try container.encode(userProfile, forKey: .user_profile)
            try container.encode(size, forKey: .size)
            try container.encode(sizeInLbs, forKey: .size_in_lbs)
            try container.encode(offerAmount, forKey: .offer_amount)
            try container.encode(driverProfile, forKey: .driver_profile)
            
            try container.encode(isPending, forKey: .is_pending)
            try container.encode(reviewByDriver, forKey: .review_by_driver)
            try container.encode(ratingByDriver, forKey: .rating_by_driver)
            try container.encode(reviewByUser, forKey: .review_by_user)
            try container.encode(ratingByUser, forKey: .rating_by_user)
            try container.encode(driverPhone, forKey: .driver_phone)
            try container.encode(userPhone, forKey: .user_phone)
            try container.encode(deliverdPhoto, forKey: .delivered_photo)
            try container.encode(unreadMessages, forKey: .unread_messages)
            try container.encode(cancelReason, forKey: .cancelled_reason)
            try container.encode(tips, forKey: .tips)
            try container.encode(is_tip_added, forKey: .is_tip_added)
            try container.encode(tipAmount, forKey: .tip_amount)
            try container.encode(pickedupPhoto, forKey: .pickedup_photo)
            try container.encode(helper_required, forKey: .helper_required)
            //
        }
        
        required public init(from decoder: Decoder) throws {
            try super.init(from: decoder)
            let values = try decoder.container(keyedBy: CodingKeys.self)
            is_tip_added = try values.decodeIfPresent(String.self, forKey: .is_tip_added)
            isOfferApplied = try values.decodeIfPresent(String.self, forKey: .is_offer_applied)
            userName = try values.decodeIfPresent(String.self, forKey: .user_name)
            pickUpImages = try values.decodeIfPresent([Images].self, forKey: .pick_up_images)
            pickupId = try values.decodeIfPresent(String.self, forKey: .pickup_id)
            pickUpLocation = try values.decodeIfPresent(String.self, forKey: .pick_up_location)
            userId = try values.decodeIfPresent(String.self, forKey: .user_id)
            pickUpLatitude = try values.decodeIfPresent(String.self, forKey: .pick_up_latitude)
            pickUpLongitude = try values.decodeIfPresent(String.self, forKey: .pick_up_longitude)
            sizeId = try values.decodeIfPresent(String.self, forKey: .size_id)
            pickUpAt = try values.decodeIfPresent(String.self, forKey: .pick_up_at)
            pickUpContactName = try values.decodeIfPresent(String.self, forKey: .pick_up_contact_name)
            pickUpContactNumber = try values.decodeIfPresent(String.self, forKey: .pick_up_contact_number)
            dropOffLocation = try values.decodeIfPresent(String.self, forKey: .drop_off_location)
            dropOffLatitude = try values.decodeIfPresent(String.self, forKey: .drop_off_latitude)
            dropOffLongitude = try values.decodeIfPresent(String.self, forKey: .drop_off_longitude)
            dropOffAt = try values.decodeIfPresent(String.self, forKey: .drop_off_at)
            dropContactName = try values.decodeIfPresent(String.self, forKey: .drop_contact_name)
            dropContactNumber = try values.decodeIfPresent(String.self, forKey: .drop_contact_number)
            estimatedAmount = try values.decodeIfPresent(String.self, forKey: .estimated_amount)
            driverId = try values.decodeIfPresent(String.self, forKey: .driver_id)
            pickUpStatus = try values.decodeIfPresent(String.self, forKey: .pick_up_status)
            driverName = try values.decodeIfPresent(String.self, forKey: .driver_name)
            userProfile = try values.decodeIfPresent(String.self, forKey: .user_profile)
            size = try values.decodeIfPresent(String.self, forKey: .size)
            sizeInLbs = try values.decodeIfPresent(String.self, forKey: .size_in_lbs)
            offerAmount = try values.decodeIfPresent(String.self, forKey: .offer_amount)
            driverProfile = try values.decodeIfPresent(String.self, forKey: .driver_profile)
            
            isPending = try values.decodeIfPresent(String.self, forKey: .is_pending)
            reviewByDriver = try values.decodeIfPresent(String.self, forKey: .review_by_driver)
            ratingByDriver = try values.decodeIfPresent(String.self, forKey: .rating_by_driver)
            reviewByUser = try values.decodeIfPresent(String.self, forKey: .review_by_user)
            ratingByUser = try values.decodeIfPresent(String.self, forKey: .rating_by_user)
            driverPhone = try values.decodeIfPresent(String.self, forKey: .driver_phone)
            userPhone = try values.decodeIfPresent(String.self, forKey: .user_phone)
            deliverdPhoto = try values.decodeIfPresent(String.self, forKey: .delivered_photo)
            unreadMessages = try values.decodeIfPresent(String.self, forKey: .unread_messages)
            cancelReason = try values.decodeIfPresent(String.self, forKey: .cancelled_reason)
            tips = try values.decodeIfPresent([String].self, forKey: .tips)
            tipAmount = try values.decodeIfPresent(String.self, forKey: .tip_amount)
            pickedupPhoto = try values.decodeIfPresent(String.self, forKey: .pickedup_photo)
            helper_required = try values.decodeIfPresent(String.self, forKey: .helper_required)
            //
        }
        
        class Images: Codable {
            var image: String?
            var moduleId: String?
            
            private enum CodingKeys: String, CodingKey {
                case image = "pickup_image"
                case ai_module_id
            }
            
            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encode(image, forKey: .image)
                try container.encode(moduleId, forKey: .ai_module_id)
            }
            
            required public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                image = try values.decodeIfPresent(String.self, forKey: .image)
                moduleId = try values.decodeIfPresent(String.self, forKey: .ai_module_id)
            }
        }
    }
}
