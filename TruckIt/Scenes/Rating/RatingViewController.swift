//
//  RatingViewController.swift
//  TruckIt
//
//  Created by hb on 28/05/20.
//  Copyright (c) 2020 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
protocol RatingDisplayLogic: class
{
    func giveRating(message: String, success: String)
    func dontShowPopUp(message: String, success: String)

}

class RatingViewController: UIViewController
{
    var interactor: RatingBusinessLogic?
    var router: (NSObjectProtocol & RatingRoutingLogic & RatingDataPassing)?
    
    @IBOutlet weak var viewRating: SwiftyStarRatingView!
    @IBOutlet weak var lblDriverName: UILabel!
    // MARK: Object lifecycle
    @IBOutlet weak var imgViewDriver: UIImageView!
    @IBOutlet weak var txtViewRating: UITextView!
    
    @IBOutlet weak var placeholderLabel: UILabel!
    
    var rating: CGFloat = 0.0
    var driverId = ""
    var pickUpId = ""
    var pickupDetails : PickUpDetail.ViewModel?
    
    var completion: (()->())?
    
    
    
    /// Insatance
    ///
    /// - Returns: GiveRatingViewController
    class func instance() -> RatingViewController? {
        return UIStoryboard(name: "Rating", bundle: nil).instantiateInitialViewController() as? RatingViewController
    }
    
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = RatingInteractor()
        let presenter = RatingPresenter()
        let router = RatingRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.setUpLayout()
        
        
//        DispatchQueue.main.asyncAfter(deadline: .now() + .seconds(1)) {
//            self.txtViewRating.becomeFirstResponder()
//        }

    }
    
    /// Setup UI
    func setUpLayout() {
        txtViewRating.delegate = self
        txtViewRating.layer.borderColor = #colorLiteral(red: 0.8039215686, green: 0.8039215686, blue: 0.7725490196, alpha: 0.5)
        txtViewRating.backgroundColor = #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
        txtViewRating.layer.cornerRadius = 5
        txtViewRating.layer.borderWidth = 0.5
        placeholderLabel.text = "Review Comments..."
        placeholderLabel.textColor = AppConstants.placeholderColor
        placeholderLabel.font = txtViewRating.font
        placeholderLabel.sizeToFit()
        txtViewRating.addSubview(placeholderLabel)
        placeholderLabel.frame.origin = CGPoint(x: 5, y: (txtViewRating.font?.pointSize)! / 2)
        placeholderLabel.isHidden = !txtViewRating.text.isEmpty
        self.imgViewDriver.setImage(with: pickupDetails?.driverProfile,placeHolder:#imageLiteral(resourceName: "sign_up_user"))
        self.lblDriverName.text = pickupDetails?.driverName
       
    }
    
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    @IBAction func btnSubmitAction(_ sender: Any) {
        
        rating = viewRating.value

        if  rating == 0.0 {
             AppConstants.appDelegate.showTopMessage(message: AlertMessage.selectRating, type: .Error)
        }
        else if txtViewRating.text.trim().isEmpty {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.requireReviewcomment, type: .Error)
        } else {
            let req = GiveRating.Request(toId: self.driverId, rating: "\(rating)", review: txtViewRating.text ?? "", pickUpId: self.pickUpId)
            
            addAnayltics(analyticsParameterItemID: "id-addratingsandreview", analyticsParameterItemName: "click_addratingsandreview", analyticsParameterContentType: "click_addratingsandreview")
            
            self.interactor?.giveRating(req: req)
        }
    }
    
    @IBAction func btnDontShowAgainAction(_ sender: Any) {
        
        let req = DontShowPopUp.Request(pickUpId: self.pickUpId, userType: "user")
        self.interactor?.dontShowPopUp(req: req)
//        self.interactor?.
    }
    
    @IBAction func btnCancelAction(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
    }
    
}


extension RatingViewController: RatingDisplayLogic {
    func giveRating(message: String, success: String) {
        if success == "1" {
            if self.completion != nil {
                self.completion!()
            }
            self.dismiss(animated: true, completion: nil)
            AppConstants.appDelegate.showTopMessage(message: message, type: .Success)
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
    
    func dontShowPopUp(message: String, success: String)
    {
        if success == "1" {
            if self.completion != nil {
                self.completion!()
            }
            self.dismiss(animated: true, completion: nil)
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
}
extension RatingViewController: UITextViewDelegate {
    func textViewDidChange(_ textView: UITextView) {
        placeholderLabel.isHidden = !txtViewRating.text.isEmpty
    }
    
    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        if textView == txtViewRating {
            let maxLength = AppConstants.textViewMaxLengeth
            let currentString: NSString = txtViewRating.text! as NSString
            let newString: NSString = currentString.replacingCharacters(in: range, with: text) as NSString
            if newString.length > maxLength {
                return newString.length <= maxLength
            }
        }
        return true
    }
}
