//
//  ReportAProblemViewController.swift
//  Udecide
//
//  Created by hb on 17/04/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SideMenu

protocol ReportAProblemDisplayLogic: class {
    func didReceiveResponse(message: String, success: String)
}

class ReportAProblemViewController: UIViewController {
    
    @IBOutlet weak var btnReportAProblem: UIButton!
    @IBOutlet weak var txtView: UITextView!
    @IBOutlet weak var viewBg: UIView!
    
    var placeholderLabel : UILabel!
    
    var interactor: ReportAProblemBusinessLogic?
    var router: (NSObjectProtocol & ReportAProblemRoutingLogic & ReportAProblemDataPassing)?
    
    /// Insatance
    ///
    /// - Returns: ReportAProblemViewController
    class func instance() -> ReportAProblemViewController? {
        return StoryBoard.ReportAProblem.board.instantiateViewController(withIdentifier: AppClass.ReportAProblemVc.rawValue) as? ReportAProblemViewController
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ReportAProblemInteractor()
        let presenter = ReportAProblemPresenter()
        let router = ReportAProblemRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
     if #available(iOS 13.0, *) {
          overrideUserInterfaceStyle = .light
     } else {
          // Fallback on earlier versions
     }
        setupLayout()
    }
    
    /// Setup Textfield and UI
    func setupLayout() {
        self.navigationItem.title = "Send a Feedback"
         self.navigationItem.leftBarButtonItem = self.getButton(image:#imageLiteral(resourceName: "menu"), selected_image: #imageLiteral(resourceName: "menu"), action: #selector(btnBackTapped), target: self)
        
        self.viewBg.layer.cornerRadius = 10
        addButtonShadow(button: btnReportAProblem)
        
        txtView.delegate = self
        txtView.layer.borderColor = #colorLiteral(red: 0.8039215686, green: 0.8039215686, blue: 0.7725490196, alpha: 0.5)
        txtView.backgroundColor = #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
        txtView.layer.cornerRadius = 5
        txtView.layer.borderWidth = 0.5
        placeholderLabel = UILabel()
        placeholderLabel.text = "Feedback"
        placeholderLabel.textColor = AppConstants.placeholderColor
        placeholderLabel.font = txtView.font
        placeholderLabel.sizeToFit()
        txtView.addSubview(placeholderLabel)
        placeholderLabel.frame.origin = CGPoint(x: 5, y: (txtView.font?.pointSize)! / 2)
        placeholderLabel.isHidden = !txtView.text.isEmpty
    }
    
    /// Back button Tap Action
    
    @objc func btnBackTapped() {
//        self.navigationController?.popViewController(animated: true)
        self.present(SideMenuManager.default.leftMenuNavigationController!, animated: true, completion: nil)
    }
    
    /// Send Feedback
    ///
    /// - Parameter sender: UIButton
    @IBAction func btnReportTapped(_ sender: UIButton) {
        self.view.endEditing(true)
        if self.txtView.text.isEmpty ?? true {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.requireFeedback, type: .Error)
        } else {
            let request = ReportAProblem.Request(problem: self.txtView.text ?? "")
            self.interactor?.reportAProblem(request: request)
        }
    }
    
}

extension ReportAProblemViewController: UITextViewDelegate {
    func textViewDidChange(_ textView: UITextView) {
        placeholderLabel.isHidden = !txtView.text.isEmpty
    }
    
    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        if textView == txtView {
            let maxLength = AppConstants.textViewMaxLengeth
            let currentString: NSString = txtView.text! as NSString
            let newString: NSString = currentString.replacingCharacters(in: range, with: text) as NSString
            if newString.length > maxLength {
                return newString.length <= maxLength
            }
        }
        return true
    }
}

extension ReportAProblemViewController: ReportAProblemDisplayLogic {
    func didReceiveResponse(message: String, success: String) {
        if success == "1" {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Success)
            txtView.text = ""
            placeholderLabel.isHidden = !txtView.text.isEmpty
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
}
