//
//  SettingsViewController.swift
//  Udecide
//
//  Created by hb on 15/04/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MessageUI
import SideMenu

protocol SettingsDisplayLogic: class {
    func didReceiveLogoutResponse(message: String, success: String)
    func didReceiveDeleteAccountResponse(message: String, success: String)
}

class SettingsViewController: UIViewController {
    
    @IBOutlet weak var btnPaymentMethod: UIButton!
    @IBOutlet weak var btnChangeMobileNumber: UIButton!
    @IBOutlet weak var btnContactUs: UIButton!
    @IBOutlet weak var btnDeleteAccount: UIButton!
    @IBOutlet weak var viewChangePassword: UIView!
    @IBOutlet weak var btnLogout: UIButton!
    @IBOutlet weak var lblVersionNumber: UILabel!
    @IBOutlet weak var btnReportAProblem: UIButton!
    @IBOutlet weak var btnTermsCondition: UIButton!
    @IBOutlet weak var btnPrivacyPolicy: UIButton!
    @IBOutlet weak var btnAboutUs: UIButton!
    @IBOutlet weak var btnChangePassword: UIButton!
    @IBOutlet weak var btnEditProfile: UIButton!
    
    @IBOutlet weak var btnFaq: UIButton!
    var interactor: SettingsBusinessLogic?
    var router: (NSObjectProtocol & SettingsRoutingLogic & SettingsDataPassing)?
    
    /// Insatance
    ///
    /// - Returns: SettingsViewController
    class func instance() -> SettingsViewController? {
        return StoryBoard.Settings.board.instantiateViewController(withIdentifier: AppClass.settingsVc.rawValue) as? SettingsViewController
    }
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = SettingsInteractor()
        let presenter = SettingsPresenter()
        let router = SettingsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
     if #available(iOS 13.0, *) {
          overrideUserInterfaceStyle = .light
     } else {
          // Fallback on earlier versions
     }
        setupLayout()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
    }
    
    /// Setup Textfield and UI
    func setupLayout() {
        self.navigationItem.title = "Settings"
        self.navigationItem.leftBarButtonItem = self.getButton(image:#imageLiteral(resourceName: "menu"), selected_image: #imageLiteral(resourceName: "menu"), action: #selector(btnBackTapped), target: self)
        self.btnLogout.layer.cornerRadius = 5
        
        btnLogout.layer.shadowRadius = 3.0
        btnLogout.layer.shadowColor = UIColor.darkGray.cgColor
        btnLogout.layer.shadowOffset = CGSize(width: 0.0, height: 1.0)
        btnLogout.layer.shadowOpacity = 0.5
        btnLogout.layer.masksToBounds = false
        
        self.lblVersionNumber.text = "Version: \(GlobalUtility.shared.appVersion())"
        
        if let user = TruckItSessionHandler.shared.getLoggedUserDetails() {
            if (user.socialLoginType == SocialLoginType.facebook.rawValue || user.socialLoginType == SocialLoginType.google.rawValue) {
                self.viewChangePassword.isHidden = true
            } else {
                self.viewChangePassword.isHidden = false
            }
        }
        
    }
    
    /// Send mail
    ///
    /// - Parameters:
    ///   - email: email id
    ///   - subject: email subject
    ///   - body: email body
    func sendMail(email:String, subject: String, body: String) {
        let toEmail = email
        let subject = subject
        let body = ""
        
        let urlString1 = "mailto:" + toEmail + "?subject="
        let urlString2 = urlString1 + subject + "&body=" + body
        let url = URL(string:urlString2)
        
        if #available(iOS 10.0, *) {
            UIApplication.shared.open(url!, options: [:], completionHandler: nil)
        } else {
            UIApplication.shared.openURL(url!)
        }
    }
    
    /// Back button Tap Action
    
    @objc func btnBackTapped() {
        self.present(SideMenuManager.default.leftMenuNavigationController!, animated: true, completion: nil)
    }
    
    /// Button option tapped
    ///
    /// - Parameter sender: btnOptions
    @IBAction func btnSettingOptionTapped(_ sender: UIButton) {
        switch sender {
        case btnEditProfile:
            if let editProfileVc = EditProfileViewController.instance() {
                self.navigationController?.pushViewController(editProfileVc, animated: true)
            }
        case btnChangePassword:
            if let changePassword = ChangePasswordViewController.instance() {
                self.navigationController?.pushViewController(changePassword, animated: true)
            }
        case btnChangeMobileNumber:
            if let changePhone = ChangeMobileNumberViewController.instance() {
                self.navigationController?.pushViewController(changePhone, animated: true)
            }
        case btnPaymentMethod:
            if let paymentVc = PaymentCardListingViewController.instance() {
                paymentVc.isFromSetting = true
                self.navigationController?.pushViewController(paymentVc, animated: true)
            }
        case btnAboutUs:
            if let staticPage = StaticPageViewController.instance() {
                staticPage.router?.dataStore?.pageCode = PageCode.aboutus.rawValue
                self.navigationController?.pushViewController(staticPage, animated: true)
            }
        case btnPrivacyPolicy:
            if let staticPage = StaticPageViewController.instance() {
                staticPage.router?.dataStore?.pageCode = PageCode.privacypolicy.rawValue
                self.navigationController?.pushViewController(staticPage, animated: true)
            }
        case btnFaq:
            if let staticPage = StaticPageViewController.instance() {
                staticPage.router?.dataStore?.pageCode = PageCode.faq.rawValue
                self.navigationController?.pushViewController(staticPage, animated: true)
            }
        case btnTermsCondition:
            if let staticPage = StaticPageViewController.instance() {
                staticPage.router?.dataStore?.pageCode = PageCode.termsconditions.rawValue
                self.navigationController?.pushViewController(staticPage, animated: true)
            }
        case btnReportAProblem:
            if let report = ReportAProblemViewController.instance() {
                self.navigationController?.pushViewController(report, animated: true)
            }
        case btnContactUs:
           self.sendMail(email: AppConstants.reportProblemEmail, subject: "", body: "")
        case btnDeleteAccount:
            self.displayAlert(msg: AlertMessage.deleteConfirmation, ok: "Yes", cancel: "No", okAction: {
                self.interactor?.deleteAccount()
            }, cancelAction: nil)
        default:
            break
        }
    }
    
    /// Logout
    ///
    /// - Parameter sender: btnLogout
    @IBAction func btnLogoutTapped(_ sender: UIButton) {
        self.showLogoutAlert(message: AlertMessage.logoutConfirmation, okAction: {
            self.interactor?.logout()
        }, cancelAction: nil)
    }
    
}

extension SettingsViewController: SettingsDisplayLogic {
    func didReceiveLogoutResponse(message: String, success: String) {
        if success == "1" {
            self.router?.Logout()
        }  else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
    
    func didReceiveDeleteAccountResponse(message: String, success: String) {
        if success == "1" {
            self.router?.Logout()
            SideMenuManager.default.menuLeftNavigationController?.dismiss(animated: false, completion: nil)
             AppConstants.appDelegate.showTopMessage(message: message, type: .Success)
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
}
