//
//  SignUpViewController.swift
//  Udecide
//
//  Created by hb on 11/04/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoogleSignIn
import GooglePlaces
import AuthenticationServices

protocol SignUpDisplayLogic: class {
    func didReceiveUniqeUser(response: CheckUniqueUSer.ViewModel?,  message: String, success: String)
}

class SignUpViewController: UIViewController {
    
    @IBOutlet weak var viewBg: UIView!
    @IBOutlet weak var btnCreatw: UIButton!
    @IBOutlet weak var txtFieldCity: UITextField!
    @IBOutlet weak var txtFieldStreat: UITextField!
    @IBOutlet weak var txtFieldLastName: UITextField!
    @IBOutlet weak var txtFieldConfirmPassword: UITextField!
    @IBOutlet weak var txtFieldPassword: UITextField!
    @IBOutlet weak var txtFieldPhone: UITextField!
    @IBOutlet weak var txtFieldEmail: UITextField!
    @IBOutlet weak var txtFieldName: UITextField!
    @IBOutlet weak var imgViewProfile: UIImageView!
    @IBOutlet weak var lblTermsConditions: UILabel!
    @IBOutlet weak var btnCheckBox: UIButton!
    
    var imgUrl = ""
    var isFromSocial = false
    var isSocialImage = false
    var socialLoginId = ""
    var socialLoginType = ""
    var socialLoginDict: [String: AnyObject]?
    var googleDict:  GIDGoogleUser!
    var appleDict: [String: AnyObject]?
    
    var request: SignUp.Request?
    var interactor: SignUpBusinessLogic?
    var router: (NSObjectProtocol & SignUpRoutingLogic & SignUpDataPassing)?
    
    var uploadedFile: Data?
    var fileType = ""
    var filename = ""
    
    var lat = "0"
    var long = "0"
    
    var isFileAvailable: Bool = false {
        didSet {
            if isFileAvailable {
                self.imgViewProfile.layer.cornerRadius = 50
                self.imgViewProfile.layer.borderColor = #colorLiteral(red: 0.9136484265, green: 0.9137764573, blue: 0.913607955, alpha: 1)
                self.imgViewProfile.layer.borderWidth = 1
            } else {
            }
        }
    }
    
    /// Insatance
    ///
    /// - Returns: SignUpViewController
    class func instance() -> SignUpViewController? {
        return StoryBoard.SignUp.board.instantiateViewController(withIdentifier: AppClass.SignUpVc.rawValue) as? SignUpViewController
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = SignUpInteractor()
        let presenter = SignUpPresenter()
        let router = SignUpRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupLayout()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
    }
    
    /// Set Data From Social Media
    func setSocialData() {
        if self.socialLoginType == SocialLoginType.facebook.rawValue {
            if let data = self.socialLoginDict {
                self.txtFieldEmail.text = data["email"] as? String
                self.imgViewProfile.setImage(with: (((data["picture"] as! [String:AnyObject])["data"] as! [String:AnyObject])["url"] as! String),placeHolder:#imageLiteral(resourceName: "sign_up_user"))
                self.imgUrl = (((data["picture"] as! [String:AnyObject])["data"] as! [String:AnyObject])["url"] as! String)
                self.filename = (((data["picture"] as! [String:AnyObject])["data"] as! [String:AnyObject])["url"] as! String)
                self.fileType = "url"
                self.isFileAvailable = true
                self.txtFieldName.text = data["first_name"] as? String
                self.txtFieldLastName.text = data["last_name"] as? String
            }
            
        } else if self.socialLoginType == SocialLoginType.google.rawValue {
            if let data = self.googleDict {
                self.txtFieldEmail.text = data.profile?.email
                self.imgViewProfile.setImage(with: data.profile?.imageURL(withDimension: 500)?.absoluteString,placeHolder:#imageLiteral(resourceName: "sign_up_user"))
                self.imgUrl = data.profile?.imageURL(withDimension: 500)?.absoluteString ?? ""
                self.filename = data.profile?.imageURL(withDimension: 500)?.absoluteString ?? ""
                self.fileType = "url"
                self.isFileAvailable = true
                self.txtFieldName.text = data.profile?.givenName
                self.txtFieldLastName.text  = data.profile?.familyName
            }
        } else if socialLoginType == SocialLoginType.apple.rawValue {
            
            if #available(iOS 13.0, *) {
                if (appleDict?["data"] as? ASAuthorizationAppleIDCredential) != nil {
                    self.socialLoginId = KeychainItem.currentUserIdentifier ?? ""
                    txtFieldPassword.isHidden = true
                    txtFieldConfirmPassword.isHidden = true
                    txtFieldName.text = KeychainItem.currentUserFirstName
                    txtFieldLastName.text = KeychainItem.currentUserLastName
                    txtFieldEmail.text = KeychainItem.currentUserEmail
                }
            }
 
        }
    }
    
    /// Setup Textfield and UI
    func setupLayout() {
        self.navigationItem.title = "Sign Up"
        
        self.lblTermsConditions.addAttributeString(mainString: AppConstants.terms, subString: "Terms & Conditions", subStringFont: UIFont(name: "Montserrat-Bold", size: self.lblTermsConditions.font.pointSize) ?? self.lblTermsConditions.font, subStringColor: self.lblTermsConditions.textColor)
        self.lblTermsConditions.addAttributeAgain(mainString: self.lblTermsConditions.attributedText!, subString: "Privacy Policy", subStringFont: UIFont(name: "Montserrat-Bold", size: self.lblTermsConditions.font.pointSize) ?? self.lblTermsConditions.font, subStringColor: self.lblTermsConditions.textColor)
        
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(termsTapped))
        self.lblTermsConditions.isUserInteractionEnabled = true
        self.lblTermsConditions.addGestureRecognizer(tapGesture)
        
        self.viewBg.layer.cornerRadius = 10
        self.btnCreatw.layer.cornerRadius = 5
        txtFieldPassword.delegate = self
        txtFieldName.delegate = self
        txtFieldPhone.delegate = self
        txtFieldEmail.delegate = self
        txtFieldConfirmPassword.delegate = self
        txtFieldLastName.delegate = self
        txtFieldStreat.delegate = self
        txtFieldCity.delegate = self
        
        addButtonShadow(button: btnCreatw)
        
        txtFieldPhone.addTarget(self, action: #selector(self.phoneTextDidChange), for: .editingChanged)
        
        setLeftViewButtonForTextField(image: #imageLiteral(resourceName: "first_name"), textField: txtFieldName)
        setLeftViewButtonForTextField(image: #imageLiteral(resourceName: "first_name"), textField: txtFieldLastName)
        setLeftViewButtonForTextField(image: #imageLiteral(resourceName: "email"), textField: txtFieldEmail)
        setLeftViewButtonForTextField(image: #imageLiteral(resourceName: "phone"), textField: txtFieldPhone)
        setLeftViewButtonForTextField(image: #imageLiteral(resourceName: "address"), textField: txtFieldStreat)
        setLeftViewButtonForTextField(image: #imageLiteral(resourceName: "address"), textField: txtFieldCity)
        setLeftViewButtonForTextField(image: #imageLiteral(resourceName: "password"), textField: txtFieldPassword)
        setLeftViewButtonForTextField(image: #imageLiteral(resourceName: "password"), textField: txtFieldConfirmPassword)
        
        if self.isFromSocial {
            self.isSocialImage = true
            self.txtFieldPassword.isHidden = true
            self.txtFieldConfirmPassword.isHidden = true
            self.txtFieldEmail.isUserInteractionEnabled = false
            setSocialData()
        }
        
    
    }
    
    @objc func phoneTextDidChange() {
        var aStr = self.txtFieldPhone.text?.replacingOccurrences(of: " ", with: "").replacingOccurrences(of: "(", with: "").replacingOccurrences(of: ")", with: "").replacingOccurrences(of: "-", with: "")
        if (aStr!.count) >= 10
        {
            aStr = aStr!.substring(start: 0, end: 10)
        }
        let str = aStr!.toPhoneNumber()
        self.txtFieldPhone.text = str
        
    }
    
    /// Redirection For Terms & conditions and privacy policy
    ///
    /// - Parameter gesture: UITapGestureRecognizer
    @objc private func termsTapped(gesture: UITapGestureRecognizer) {
        let text = (self.lblTermsConditions.text)!
        let agreementRange = (text as NSString).range(of: "Terms & Conditions")
        let privacyRange = (text as NSString).range(of: "Privacy Policy")
        
        var pageCode = ""
        
        if gesture.didTapAttributedTextInLabel(label: self.lblTermsConditions, inRange: agreementRange) {
            debugPrint("Terms & Conditions")
            pageCode = PageCode.termsconditions.rawValue
        } else if gesture.didTapAttributedTextInLabel(label: self.lblTermsConditions, inRange: privacyRange) {
            debugPrint("Privacy Policy")
            pageCode = PageCode.privacypolicy.rawValue
        } else {}
        
        if pageCode != "" {
            if let staticPageVc = StaticPageViewController.instance() {
                staticPageVc.router?.dataStore?.pageCode = pageCode
                self.navigationController?.pushViewController(staticPageVc, animated: true)
            }
        }
    }
    
    /// Open Image Picker (camera/gallery)
    func showImagePicker() {
        CustomImagePicker.shared.openImagePickerWith(mediaType: .MediaTypeImage, allowsEditing: true, actionSheetTitle: "Select Photo", message: "Please choose option", cancelButtonTitle: "Cancel", cameraButtonTitle: "Camera", galleryButtonTitle: "Gallery") { (_, success, dic) in
            if success {
                if let img = dic!["edited_image"] as? UIImage {
                    self.imgUrl = dic!["stringUrl"] as? String ?? ""
                    self.uploadedFile = img.compressTo(0.5)
                    self.fileType = "png"
                    self.imgViewProfile.image = img
                    self.imgViewProfile.contentMode = .scaleAspectFill
                }
                self.isFileAvailable = true
            }
        }
    }
    
    /// Validiate Input Fields and call Sign Up Api
    fileprivate func validiateInput() {
        self.view.endEditing(true)
        if txtFieldName.text?.isEmpty ?? true {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.firstNameRequired, type: .Error)
            txtFieldName.becomeFirstResponder()
        } else if txtFieldLastName.text?.isEmpty ?? true {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.lastNameRequired, type: .Error)
            txtFieldLastName.becomeFirstResponder()
        } else if txtFieldPhone.text?.isEmpty ?? true {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.requiewPhone, type: .Error)
            txtFieldPhone.becomeFirstResponder()
        } else if !(txtFieldPhone.text?.isValidMobile ?? false) {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.invalidPhoneNumber, type: .Error)
            txtFieldPhone.becomeFirstResponder()
        } else if txtFieldEmail.text?.isEmpty ?? true {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.emailRequired, type: .Error)
            txtFieldEmail.becomeFirstResponder()
        } else if !(txtFieldEmail.text?.isValidEmail() ?? false) {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.invalidEmail, type: .Error)
            txtFieldEmail.becomeFirstResponder()
        }
//        else if txtFieldStreat.text?.isEmpty ?? true {
//            AppConstants.appDelegate.showTopMessage(message: AlertMessage.requireAddress, type: .Error)
//            txtFieldStreat.becomeFirstResponder()
//        }
        else if (txtFieldPassword.text?.isEmpty ?? true) && !self.isFromSocial {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.passwordRequired, type: .Error)
            txtFieldPassword.becomeFirstResponder()
        } else if !(txtFieldPassword.text?.isValidPassword() ?? false) && !self.isFromSocial {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.invalidPassword, type: .Error, displayDuraction: 10)
            self.txtFieldPassword.becomeFirstResponder()
        } else if (txtFieldConfirmPassword.text?.isEmpty ?? true) && !self.isFromSocial {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.requiewReEnterNewPassword, type: .Error)
            txtFieldConfirmPassword.becomeFirstResponder()
        } else if (txtFieldPassword.text != txtFieldConfirmPassword.text) && !self.isFromSocial {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.invalidConfirmPassword, type: .Error)
            txtFieldConfirmPassword.becomeFirstResponder()
        } else if !(btnCheckBox.isSelected) {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.agreeToTerms, type: .Error)
        } else {
            if self.isFromSocial {
                let image = self.imgViewProfile.image ?? UIImage()
                uploadedFile = image.compressTo(0.5)
                self.fileType = "png"
                self.filename = ""
            }
            
            let phone = txtFieldPhone.text?.replacingOccurrences(of: "(", with: "").replacingOccurrences(of: ")", with: "").replacingOccurrences(of: " ", with: "").replacingOccurrences(of: "-", with: "")
            let request = SignUp.Request(email: txtFieldEmail.text ?? "", password: AESCrypt.encrypt((txtFieldPassword.text ?? ""), password: AppConstants.aesEncryptionKey, isPreviewApp: false), socialLoginId: self.socialLoginId, socialLoginType: self.socialLoginType, firstName: txtFieldName.text?.trimmingCharacters(in: .whitespaces) ?? "", lastName: txtFieldLastName.text?.trimmingCharacters(in: .whitespaces) ?? "", userProfile: uploadedFile ?? Data(), profileType: self.fileType, phoneNumber: phone ?? "", socialProfileURl: self.filename, address: txtFieldStreat.text ?? "", lat: self.lat, long: self.long, aboutMe: "", aptNo: txtFieldCity.text ?? "")
            
//            
//                        let request = SignUp.Request(email: txtFieldEmail.text ?? "", password: (txtFieldPassword.text ?? ""), socialLoginId: self.socialLoginId, socialLoginType: self.socialLoginType, firstName: txtFieldName.text?.trimmingCharacters(in: .whitespaces) ?? "", lastName: txtFieldLastName.text?.trimmingCharacters(in: .whitespaces) ?? "", userProfile: uploadedFile ?? Data(), profileType: self.fileType, phoneNumber: phone ?? "", socialProfileURl: self.filename, address: txtFieldStreat.text ?? "", lat: self.lat, long: self.long, aboutMe: "", aptNo: txtFieldCity.text ?? "")
            
            self.request = request
            let req = CheckUniqueUSer.Request(email: txtFieldEmail.text ?? "", phone: phone ?? "")
            self.interactor?.checkUniqUser(request: req)
        }
    }
    
    /// Pick Profile Image
    ///
    /// - Parameter sender: btnProfileImage
    @IBAction func btnImagePickTapped(_ sender: UIButton) {
        self.showImagePicker()
    }
    
    /// Agree For Terms and Conditions
    ///
    /// - Parameter sender: btnCheckBox
    @IBAction func btnCheckBoxTapped(_ sender: UIButton) {
        btnCheckBox.isSelected = !btnCheckBox.isSelected
    }
    
    /// Show Detail image view
    ///
    /// - Parameter sender: UIbutton
    @IBAction func showImageDetailView(_ sender: UIButton) {
        if imgUrl != "" {
            self.showImageDetailView(arrImage: [imgUrl])
        }
    }
    
    /// Create New Account
    ///
    /// - Parameter sender: btnCreateAccount
    @IBAction func btnCreateAccountTapped(_ sender: UIButton) {
        validiateInput()
    }
    
    /// Back To Sign In
    ///
    /// - Parameter sender: btnsignIn
    @IBAction func btnSignInTapped(_ sender: UIButton) {
        let count = self.navigationController?.viewControllers.count
        if let loginVc = self.navigationController?.viewControllers[(count ?? 0)-2] as? LoginViewController {
            self.navigationController?.popToViewController(loginVc, animated: true)
        }
    }
}

extension SignUpViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField == txtFieldName {
            txtFieldLastName.becomeFirstResponder()
        } else if textField == txtFieldLastName {
            txtFieldEmail.becomeFirstResponder()
        } else if textField == txtFieldPhone {
            txtFieldEmail.becomeFirstResponder()
        } else if textField == txtFieldEmail {
            txtFieldStreat.becomeFirstResponder()
        } else if textField == txtFieldStreat {
            txtFieldCity.becomeFirstResponder()
        }  else if textField == txtFieldPassword {
            txtFieldConfirmPassword.becomeFirstResponder()
        } else if textField == txtFieldConfirmPassword {
            txtFieldConfirmPassword.resignFirstResponder()
        }
        return true
    }
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        if textField == txtFieldStreat {
            if let googleApi = GoogleSearch.instance() {
                googleApi.completion = {predictor, address ,error in
                    guard error == nil else {return}
                    if let predictor = predictor {
                        self.txtFieldStreat.text = address
                        
                        let placeClient = GMSPlacesClient.shared()
                        placeClient.lookUpPlaceID(predictor.placeID) { (place, error) in
                            if error == nil
                            {
                                print(String(describing: (place?.coordinate.latitude)!))
                                print(String(describing: (place?.coordinate.longitude)!))
                                self.lat = String(describing: (place?.coordinate.latitude)!)
                                self.long = String(describing: (place?.coordinate.longitude)!)
                                
                            }
                        }
                    }
                }
                googleApi.modalPresentationStyle = .fullScreen
                self.present(googleApi, animated: true, completion: nil)
            }
        }
    }
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        if textField == txtFieldPassword {
            let maxLength = AppConstants.paswordMaxLength
            let currentString: NSString = textField.text! as NSString
            let newString: NSString = currentString.replacingCharacters(in: range, with: string) as NSString
            if newString.length > maxLength {
                return newString.length <= maxLength
            }
        } else if (textField == txtFieldName || textField == txtFieldLastName) {
            do {
                let regex = try NSRegularExpression(pattern: ".*[^A-Za-z ].*", options: [])
                if regex.firstMatch(in: string, options: [], range: NSMakeRange(0, string.count)) != nil {
                    return false
                } else {
                    let maxLength = AppConstants.textFieldMaxLengeth
                    let currentString: NSString = textField.text! as NSString
                    let newString: NSString = currentString.replacingCharacters(in: range, with: string) as NSString
                    if newString.length > maxLength {
                        return newString.length <= maxLength
                    }
                }
            }
            catch {
                print("ERROR")
            }
        } else if textField == txtFieldEmail {
            let maxLength = AppConstants.textFieldMaxLengeth
            let currentString: NSString = textField.text! as NSString
            let newString: NSString = currentString.replacingCharacters(in: range, with: string) as NSString
            if newString.length > maxLength {
                return newString.length <= maxLength
            }
        }
        return true
    }
}

extension SignUpViewController: SignUpDisplayLogic {
    func didReceiveUniqeUser(response: CheckUniqueUSer.ViewModel?,  message: String, success: String) {
        if success == "1" {
            if let response = response {
                if let verifyOtp = VerifyOtpViewController.instance() {
                    verifyOtp.isSignUp = true
                    verifyOtp.request = self.request
                    verifyOtp.otp = response.otp ?? ""
                    self.navigationController?.pushViewController(verifyOtp, animated: true)
                }
            }
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
}
