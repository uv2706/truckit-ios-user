//
//  TipViewController.swift
//  TruckIt
//
//  Created by hb on 30/12/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TipDisplayLogic: class {
    
}

class TipViewController: UIViewController, TipDisplayLogic {
    var interactor: TipBusinessLogic?
    var router: (NSObjectProtocol & TipRoutingLogic & TipDataPassing)?
    
    var selectedIndex: IndexPath?
    @IBOutlet weak var txtFieldAmount: UITextField!
    @IBOutlet weak var clnView: UICollectionView!
    // MARK: Object lifecycle
    
    @IBOutlet weak var lblTip: UILabel!
    var pickupId = ""
    var tips = [String]()
    var amount = ""
    var tipAmount = ""
    var submitCallBack: ((Tip.Request)->())?
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    /// Insatance
    ///
    /// - Returns: TipViewController
    class func instance() -> TipViewController? {
        return StoryBoard.Tip.board.instantiateViewController(withIdentifier: AppClass.TipVc.rawValue) as? TipViewController
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = TipInteractor()
        let presenter = TipPresenter()
        let router = TipRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
     if #available(iOS 13.0, *) {
          overrideUserInterfaceStyle = .light
     } else {
          // Fallback on earlier versions
     }
        self.tips.append("Other")
        txtFieldAmount.delegate = self
        clnView.delegate = self
        clnView.dataSource = self
    }
    
    @IBAction func btnDismissTapped(_ sender: UIButton) {
        self.dismiss(animated: true, completion: nil)
    }
    
    @IBAction func btnAddTipAction(_ sender: UIButton) {
        if let indexpath = self.selectedIndex {
            if !(indexpath.row == (self.tips.count-1)) {
                let request = Tip.Request(tipAmount: tipAmount, pickupId: self.pickupId, stripeCardId: "")
                if self.submitCallBack != nil {
                    self.submitCallBack!(request)
                }
                self.dismiss(animated: true, completion: nil)
            } else {
                if txtFieldAmount.text?.isEmpty ?? true {
                    AppConstants.appDelegate.showTopMessage(message: AlertMessage.addTip, type: .Error)
                } else {
                    let request = Tip.Request(tipAmount: txtFieldAmount.text ?? "", pickupId: self.pickupId, stripeCardId: "")
                    if self.submitCallBack != nil {
                        self.submitCallBack!(request)
                    }
                    self.dismiss(animated: true, completion: nil)
                }
            }
        } else {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.selectTip, type: .Error)
        }
    }
}

extension TipViewController: UITextFieldDelegate {
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        if textField == txtFieldAmount {
            let currentString: NSString = textField.text! as NSString
            let newString: NSString = currentString.replacingCharacters(in: range, with: string) as NSString
            
            if newString.contains(".") {
                if newString.length > 8 {
                    return newString.length <= 8
                }
            } else {
                if newString.length > 5 {
                    return newString.length <= 5
                }
            }
            
            if newString.length != 0 {
                lblTip.isHidden = false
                lblTip.text = "You're sending $\(newString) tip amount."
            } else {
                lblTip.isHidden = true
            }
            
        }
        return true
    }
}

extension TipViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.tips.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: TipCell.cellId, for: indexPath) as! TipCell
        cell.btnTip.layer.borderColor = #colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1)
        let text = (self.tips[indexPath.row] == "Other") ? (self.tips[indexPath.row]):"\(self.tips[indexPath.row])%"
        cell.btnTip.setTitle(text, for: UIControl.State())
        
        if self.selectedIndex != nil {
            cell.btnTip.isSelected = (indexPath.row == self.selectedIndex?.row)
        } else {
            cell.btnTip.isSelected = false
        }
        cell.btnTip.layer.borderColor = cell.btnTip.isSelected ? #colorLiteral(red: 0.09019608051, green: 0, blue: 0.3019607961, alpha: 1):#colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1)
        
        cell.btnTap = {
            cell.btnTip.isSelected = !cell.btnTip.isSelected
            if cell.btnTip.isSelected {
                
                self.txtFieldAmount.isHidden = !(self.tips[indexPath.row] == "Other")
                if (self.tips[indexPath.row] == "Other") {
                    self.lblTip.isHidden = true
                } else {
                    self.lblTip.isHidden = false
                    self.txtFieldAmount.text = ""
                    self.lblTip.text = "You're sending $\(self.getAmount(tip: self.tips[indexPath.row])) tip amount."
                }
                
                self.selectedIndex = indexPath
            }
            self.clnView.reloadData()
        }
        return cell
    }
    
    func getAmount(tip: String) -> String {
        let amount = Double(self.amount)
        let percent = Double(tip)
        let calculatedAmount = ((percent ?? 0.0)/100)*(amount ?? 0.0)
        self.tipAmount = GlobalUtility.shared.roundOffTextTwoDigit("\(calculatedAmount)")
        return GlobalUtility.shared.roundOffTextTwoDigit("\(calculatedAmount)")
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        return CGSize(width: 90, height: 50)
    }
    
}
