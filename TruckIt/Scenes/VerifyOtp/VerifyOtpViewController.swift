//
//  VerifyOtpViewController.swift
//  PickUpUser
//
//  Created by hb on 07/06/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol VerifyOtpDisplayLogic: class {
    func didReceiveSignUpResponse(response: Login.Authentication.ViewModel?, message: String, success: String)
    func didReceiveChangePhoneResponse(message: String, success: String)
}

class VerifyOtpViewController: UIViewController, CBPinEntryViewDelegate {
    
    @IBOutlet weak var viewBg: UIView!
    @IBOutlet weak var btnSend: UIButton!
    @IBOutlet weak var viewPin: CBPinEntryView!
    
    var interactor: VerifyOtpBusinessLogic?
    var router: (NSObjectProtocol & VerifyOtpRoutingLogic & VerifyOtpDataPassing)?
    
    var isSignUp = true
    var isMobile = false
    var request: SignUp.Request?
    var otp = ""
    var mobileNumber = ""
    var forgotPasswordData : ForgotPassword.ViewModel?
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    /// Insatance
    ///
    /// - Returns: EditProfileViewController
    class func instance() -> VerifyOtpViewController? {
        return StoryBoard.VerifyOtp.board.instantiateViewController(withIdentifier: AppClass.VerifyOtpVc.rawValue) as? VerifyOtpViewController
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = VerifyOtpInteractor()
        let presenter = VerifyOtpPresenter()
        let router = VerifyOtpRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
     if #available(iOS 13.0, *) {
          overrideUserInterfaceStyle = .light
     } else {
          // Fallback on earlier versions
     }
        setupLayout()
    }
    
    /// Setup Textfield and UI
    func setupLayout() {
        self.navigationItem.title = "Enter Verification Code"
        addButtonShadow(button: btnSend)
        viewBg.layer.cornerRadius = 5
     //   self.viewPin.setPinAsString(pin: self.otp)
    }
        
    /// Verify otp
    ///
    /// - Parameter sender: UIbutton
    @IBAction func btnSendTapped(_ sender: Any) {
        let otpNp = viewPin.getPinAsString()
        if otpNp.count == 0 {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.requireVarificationCode, type: .Error)
        } else if otpNp.count < 4 {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.invalidOtp, type: .Error)
        } else if otpNp.count > 4 {
            AppConstants.appDelegate.showTopMessage(message: AlertMessage.invalidOtp, type: .Error)
        } else {
            if self.otp != otpNp {
                AppConstants.appDelegate.showTopMessage(message: AlertMessage.wrongOtp, type: .Error)
            } else {
                if isSignUp == true {
                    if let req = self.request {
                        self.interactor?.signUp(request: req)
                    }
                } else {
                    if isMobile {
                        let req = VerifyOtp.Request(mobile: self.mobileNumber)
                        self.interactor?.changePhone(request: req)
                    } else {
                        if let resetPasswordVC = ResetPasswordViewController.instance() {
                            resetPasswordVC.forgotPasswordData = forgotPasswordData
                            resetPasswordVC.mobileNumber = mobileNumber
                            self.navigationController?.pushViewController(resetPasswordVC, animated: true)
                        }
                    }
                }
            }
        }
    }

    /// Textfield text edit action
    ///
    /// - Parameter completed: return trur/false
    func entryChanged(_ completed: Bool) {
        self.viewPin.resignFirstResponder()
    }
}

extension VerifyOtpViewController: VerifyOtpDisplayLogic {
    func didReceiveSignUpResponse(response: Login.Authentication.ViewModel?, message: String, success: String) {
        if success == "1" {
            if let response = response {
                self.router?.redirectToHome(response: response)
            } else {
                AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
            }
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
    
    func didReceiveChangePhoneResponse(message: String, success: String) {
        if success == "1" {
            if let settingVc = self.navigationController?.viewControllers[(self.navigationController?.viewControllers.count ?? 0)-3] as? SettingsViewController {
                
                let aModel = TruckItSessionHandler.shared.getLoggedUserDetails()
                aModel?.mobileNo = self.mobileNumber
                TruckItSessionHandler.shared.setLoggedUserDetails(userDetail: aModel!)
                
                self.navigationController?.popToViewController(settingVc, animated: true)
                
                
            }
            
            AppConstants.appDelegate.showTopMessage(message: message, type: .Success)
        } else {
            AppConstants.appDelegate.showTopMessage(message: message, type: .Error)
        }
    }
}
